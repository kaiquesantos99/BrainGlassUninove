[
  {
    "questao": "O que o modificador 'static' faz em um método ou variável em C#?",
    "alt1": "Torna o membro acessível sem precisar instanciar a classe",
    "alt2": "Permite que o membro seja sobrescrito em heranças",
    "alt3": "Cria uma instância automaticamente",
    "alt4": "Torna o membro privado"
  },
  {
    "questao": "Para que serve o método GetComponent no Unity?",
    "alt1": "Acessar um componente acoplado a um GameObject",
    "alt2": "Instanciar um novo GameObject na cena",
    "alt3": "Destruir um componente de outro GameObject",
    "alt4": "Alterar o nome do GameObject"
  },
  {
    "questao": "O que significa 'FromJson' em C# com Unity?",
    "alt1": "Converte uma string JSON em um objeto de uma classe",
    "alt2": "Transforma uma imagem em formato JSON",
    "alt3": "Gera um arquivo XML a partir de um JSON",
    "alt4": "Exporta dados da Unity para o navegador"
  },
  {
    "questao": "Qual é a saída do código: int x = 5; x += 3; print(x);",
    "alt1": "8",
    "alt2": "5",
    "alt3": "3",
    "alt4": "Erro de compilação"
  },
  {
    "questao": "Como usar um loop 'foreach' corretamente em C#?",
    "alt1": "foreach(string nome in nomes) { Debug.Log(nome); }",
    "alt2": "foreach(string in nome nomes) { print(nome); }",
    "alt3": "foreach(nomes in string nome) { return nome; }",
    "alt4": "for(string nome in nomes) { }"
  },
  {
    "questao": "Para que serve o comando 'git status' no Git?",
    "alt1": "Mostra os arquivos modificados e o estado do repositório",
    "alt2": "Cria um novo branch",
    "alt3": "Envia arquivos para o GitHub",
    "alt4": "Salva alterações no repositório local"
  },
  {
    "questao": "O que faz o comando 'git commit -m \"mensagem\"'?",
    "alt1": "Salva as mudanças no histórico local com uma mensagem descritiva",
    "alt2": "Cria uma branch com o nome 'mensagem'",
    "alt3": "Envia arquivos para o repositório remoto",
    "alt4": "Desfaz alterações não salvas"
  },
  {
    "questao": "Qual estrutura representa corretamente uma função em C#?",
    "alt1": "public int Somar(int a, int b) { return a + b; }",
    "alt2": "int public Somar(a, b) { return a + b }",
    "alt3": "function Somar(a, b) { return a + b }",
    "alt4": "Somar public(int a, int b): return a + b;"
  },
  {
    "questao": "Como criar um array de inteiros com 5 posições em C#?",
    "alt1": "int[] numeros = new int[5];",
    "alt2": "int numeros = [5];",
    "alt3": "int[5] numeros;",
    "alt4": "array<int> numeros = new array(5);"
  },
  {
    "questao": "Em Unity, qual comando usamos para carregar um arquivo JSON da pasta Resources?",
    "alt1": "TextAsset jsonFile = Resources.Load<TextAsset>(\"arquivo\");",
    "alt2": "var json = File.Load(\"Resources/arquivo.json\");",
    "alt3": "Resources.jsonFile(\"arquivo\")",
    "alt4": "JsonAsset arquivo = GetResource<TextAsset>(\"json\")"
  },
  {
    "questao": "Qual palavra-chave em C# define uma classe como base que outras classes podem herdar?",
    "alt1": "public",
    "alt2": "override",
    "alt3": "sealed",
    "alt4": "internal"
  },
  {
    "questao": "Em C#, o que significa a instrução 'foreach'?",
    "alt1": "Percorrer todos os elementos de uma coleção",
    "alt2": "Criar uma nova coleção",
    "alt3": "Ordenar uma coleção automaticamente",
    "alt4": "Comparar elementos de uma lista"
  },
  {
    "questao": "O que faz o comando 'git clone'?",
    "alt1": "Copia um repositório remoto para sua máquina local",
    "alt2": "Remove o repositório local",
    "alt3": "Atualiza o repositório remoto com seu código",
    "alt4": "Cria uma nova branch no projeto"
  },
  {
    "questao": "Para que serve o 'JsonUtility.FromJson<T>()' no Unity?",
    "alt1": "Converter uma string JSON em um objeto do tipo T",
    "alt2": "Salvar arquivos JSON no disco",
    "alt3": "Remover dados de um arquivo JSON",
    "alt4": "Gerar um JSON vazio"
  },
  {
    "questao": "O que é necessário para que uma classe possa ser serializada no Unity?",
    "alt1": "Atributo [System.Serializable] na classe",
    "alt2": "Herdar de MonoBehaviour obrigatoriamente",
    "alt3": "Nome da classe começar com Json",
    "alt4": "Adicionar o atributo [NonSerialized]"
  },
  {
    "questao": "O que faz o comando 'git commit'?",
    "alt1": "Registra alterações no repositório local",
    "alt2": "Sincroniza alterações com o repositório remoto",
    "alt3": "Baixa o histórico do repositório remoto",
    "alt4": "Exclui os arquivos não versionados"
  },
  {
    "questao": "Qual o objetivo da Programação Orientada a Objetos (POO)?",
    "alt1": "Organizar o código em objetos com propriedades e comportamentos",
    "alt2": "Evitar o uso de funções em linguagens modernas",
    "alt3": "Utilizar exclusivamente estruturas condicionais",
    "alt4": "Gerar classes sem métodos"
  },
  {
    "questao": "No Unity, o que acontece quando usamos GetComponent<Rigidbody>()?",
    "alt1": "Pega o componente Rigidbody do GameObject",
    "alt2": "Cria um novo Rigidbody na cena",
    "alt3": "Remove todos os componentes do tipo Rigidbody",
    "alt4": "Pega o Rigidbody do objeto pai"
  },
  {
    "questao": "O que significa a palavra-chave 'override' em C#?",
    "alt1": "Sobrescreve um método virtual da classe base",
    "alt2": "Declara um novo método sem herança",
    "alt3": "Impede que um método seja herdado",
    "alt4": "Executa métodos em paralelo"
  },
  {
    "questao": "Para que serve o método JsonUtility.ToJson() no Unity?",
    "alt1": "Converte um objeto para string JSON",
    "alt2": "Salva o arquivo JSON no disco automaticamente",
    "alt3": "Importa arquivos JSON da internet",
    "alt4": "Compara dois arquivos JSON"
  },
  {
    "questao": "O que representa uma variável marcada como 'private' em C#?",
    "alt1": "Só pode ser acessada dentro da própria classe",
    "alt2": "É acessível de qualquer parte do código",
    "alt3": "Só pode ser acessada pela subclasse",
    "alt4": "É compartilhada entre todas as instâncias"
  },
  {
    "questao": "Qual comando Git envia as alterações locais para o repositório remoto?",
    "alt1": "git push",
    "alt2": "git fetch",
    "alt3": "git status",
    "alt4": "git init"
  },
  {
    "questao": "O que significa 'Deserialize' em programação?",
    "alt1": "Converter um JSON ou outro formato em objeto utilizável",
    "alt2": "Transformar um objeto em string compactada",
    "alt3": "Criar um novo objeto a partir de uma classe abstrata",
    "alt4": "Excluir atributos de uma estrutura"
  },
  {
    "questao": "Como evitar erros ao usar GetComponent em Unity?",
    "alt1": "Certificando-se que o componente existe no GameObject",
    "alt2": "Usando GetComponent fora do método Start",
    "alt3": "Chamando o GetComponent várias vezes por frame",
    "alt4": "Usando GameManager.GetComponent sempre"
  },
  {
    "questao": "Em C#, o que é uma classe 'abstract'?",
    "alt1": "Uma classe que não pode ser instanciada diretamente",
    "alt2": "Uma classe que não pode ter métodos",
    "alt3": "Uma classe com todos os métodos estáticos",
    "alt4": "Uma classe usada apenas em scripts de interface"
  },
  {
    "questao": "Qual comando Git cria uma nova branch?",
    "alt1": "git branch nomeDaBranch",
    "alt2": "git create nomeDaBranch",
    "alt3": "git new-branch nome",
    "alt4": "git checkout nome"
  },
  {
    "questao": "O que a função 'Start()' representa no Unity?",
    "alt1": "Método que roda uma vez no início da execução",
    "alt2": "Método chamado a cada frame",
    "alt3": "Método que inicia a aplicação Unity",
    "alt4": "Função usada para definir as variáveis globais"
  },
  {
    "questao": "O que é uma coroutine no Unity?",
    "alt1": "Um método que permite executar ações ao longo do tempo",
    "alt2": "Um tipo de classe herdada de MonoBehaviour",
    "alt3": "Um evento chamado automaticamente ao iniciar",
    "alt4": "Uma variável usada para contar frames"
  },
  {
    "questao": "Como declarar uma lista genérica em C#?",
    "alt1": "List<string> nomes = new List<string>();",
    "alt2": "var nomes = [string];",
    "alt3": "List = string();",
    "alt4": "string<> nomes = List();"
  },
  {
    "questao": "Para que serve o comando 'git status'?",
    "alt1": "Exibir as alterações no repositório local",
    "alt2": "Enviar o código para o GitHub",
    "alt3": "Remover arquivos antigos do repositório",
    "alt4": "Fazer o merge de duas branches"
  },
  {
    "questao": "Em C#, o que a palavra-chave 'static' indica em um método?",
    "alt1": "Que o método pertence à classe e não a uma instância",
    "alt2": "Que o método só pode ser chamado uma vez",
    "alt3": "Que o método é privado",
    "alt4": "Que o método não pode ser modificado"
  },
  {
    "questao": "O que acontece se você tentar acessar um componente com GetComponent<>() que não existe no GameObject?",
    "alt1": "Retorna null",
    "alt2": "Cria o componente automaticamente",
    "alt3": "Gera um erro de compilação",
    "alt4": "Trava o Unity"
  },
  {
    "questao": "Qual o propósito do 'JsonUtility.ToJson()' no Unity?",
    "alt1": "Transformar um objeto em uma string JSON",
    "alt2": "Transformar um arquivo JSON em objeto",
    "alt3": "Excluir campos nulos do JSON",
    "alt4": "Sincronizar arquivos JSON no cloud"
  },
  {
    "questao": "No Git, o que faz o comando 'git pull'?",
    "alt1": "Atualiza seu repositório local com o conteúdo do repositório remoto",
    "alt2": "Exclui sua branch local",
    "alt3": "Envia alterações locais para o repositório remoto",
    "alt4": "Cria um novo commit vazio"
  },
  {
    "questao": "Em Unity, qual evento é chamado quando o GameObject é ativado na cena?",
    "alt1": "OnEnable()",
    "alt2": "Start()",
    "alt3": "Awake()",
    "alt4": "OnActive()"
  },
  {
    "questao": "Qual estrutura é usada para repetir um bloco de código enquanto uma condição for verdadeira?",
    "alt1": "while",
    "alt2": "switch",
    "alt3": "using",
    "alt4": "return"
  },
  {
    "questao": "Em C#, o que é um construtor?",
    "alt1": "Um método especial chamado ao criar uma nova instância de uma classe",
    "alt2": "Um método usado para destruir objetos",
    "alt3": "Um atributo especial que define a classe",
    "alt4": "Uma propriedade de tempo de execução"
  },
  {
    "questao": "O que é 'Serialização' em programação?",
    "alt1": "Converter um objeto em um formato que possa ser armazenado ou transmitido",
    "alt2": "Conectar um script a outro",
    "alt3": "Executar uma função várias vezes em paralelo",
    "alt4": "Gerar logs em tempo real"
  },
  {
    "questao": "Como aplicar um script a um GameObject no Unity?",
    "alt1": "Arrastando o script para o GameObject na hierarquia",
    "alt2": "Clicando com o botão direito e selecionando 'Add Script'",
    "alt3": "Usando o menu Tools > Attach Script",
    "alt4": "Copiando o código para dentro do componente Transform"
  },
  {
    "questao": "Para que serve a palavra-chave 'void' em C#?",
    "alt1": "Indica que o método não retorna nenhum valor",
    "alt2": "Define que o método será chamado automaticamente",
    "alt3": "Cria um loop infinito",
    "alt4": "Marca a função como inválida"
  },
  {
    "questao": "No Git, o que significa 'merge'?",
    "alt1": "Combinar duas branches em uma só",
    "alt2": "Remover arquivos duplicados",
    "alt3": "Atualizar seu repositório remoto",
    "alt4": "Excluir commits anteriores"
  },
  {
    "questao": "Em Unity, o que a função 'Awake()' faz?",
    "alt1": "É chamada antes do Start() quando o script é inicializado",
    "alt2": "Roda sempre que o botão play é clicado",
    "alt3": "Atualiza os valores da física do Rigidbody",
    "alt4": "Chama um evento de animação"
  },
  {
    "questao": "Qual comando Git cria um novo repositório local?",
    "alt1": "git init",
    "alt2": "git start",
    "alt3": "git new",
    "alt4": "git clone"
  },
  {
    "questao": "O que representa 'List<T>' em C#?",
    "alt1": "Uma lista genérica de elementos do tipo T",
    "alt2": "Um array com tamanho fixo",
    "alt3": "Uma variável constante",
    "alt4": "Um componente de interface gráfica"
  },
  {
    "questao": "Qual é a função da estrutura 'if' em C#?",
    "alt1": "Executar um bloco de código baseado em uma condição booleana",
    "alt2": "Repetir ações indefinidamente",
    "alt3": "Encerrar a execução do programa",
    "alt4": "Iniciar uma nova thread"
  },
  {
    "questao": "No Unity, para acessar outro script em um GameObject, qual método é usado?",
    "alt1": "GetComponent<NomeDoScript>()",
    "alt2": "AccessScript<>()",
    "alt3": "GetScript<>()",
    "alt4": "FindObject<>()"
  },
  {
    "questao": "Para que serve a classe 'TextAsset' no Unity?",
    "alt1": "Carregar arquivos de texto ou JSON em tempo de execução",
    "alt2": "Criar um novo arquivo de texto na cena",
    "alt3": "Renderizar textos na UI",
    "alt4": "Salvar dados do jogador em tempo real"
  },
  {
    "questao": "Em C#, qual tipo de variável pode armazenar verdadeiro ou falso?",
    "alt1": "bool",
    "alt2": "int",
    "alt3": "string",
    "alt4": "char"
  },
  {
    "questao": "Como definir um método público em C#?",
    "alt1": "public void MetodoNome()",
    "alt2": "void public MetodoNome()",
    "alt3": "public MetodoNome void()",
    "alt4": "method public void()"
  },
  {
    "questao": "O que é um prefab no Unity?",
    "alt1": "Um modelo reutilizável de GameObject",
    "alt2": "Um script de controle de UI",
    "alt3": "Um tipo de variável global",
    "alt4": "Um componente exclusivo de física"
  },
  {
    "questao": "O que o método 'FromJson<T>()' faz no Unity?",
    "alt1": "Converte uma string JSON em um objeto do tipo T",
    "alt2": "Transforma um GameObject em JSON",
    "alt3": "Apaga um arquivo JSON do disco",
    "alt4": "Cria um JSON criptografado a partir de um objeto"
  },
  {
    "questao": "Para que serve o método 'ToJson()' da JsonUtility?",
    "alt1": "Serializa um objeto para o formato JSON",
    "alt2": "Converte um JSON em uma lista de strings",
    "alt3": "Compacta um JSON para economizar memória",
    "alt4": "Valida a estrutura de um JSON contra um schema"
  },
  {
    "questao": "Qual comando Git é usado para enviar commits para o repositório remoto?",
    "alt1": "git push",
    "alt2": "git send",
    "alt3": "git upload",
    "alt4": "git publish"
  },
  {
    "questao": "O que significa a palavra-chave 'override' em C#?",
    "alt1": "Indica que um método está sobrescrevendo um método da classe base",
    "alt2": "Impede que o método seja chamado fora da classe",
    "alt3": "Cria um método novo com o mesmo nome",
    "alt4": "Oculta completamente os métodos herdados"
  },
  {
    "questao": "Em que situação você usaria 'foreach' em C#?",
    "alt1": "Ao iterar por elementos de uma coleção sem precisar de índice",
    "alt2": "Ao criar uma nova lista vazia",
    "alt3": "Ao declarar variáveis globais",
    "alt4": "Ao iniciar um novo projeto no Visual Studio"
  },
  {
    "questao": "O que o comando 'git status' exibe?",
    "alt1": "O estado atual do repositório local e arquivos modificados",
    "alt2": "A branch remota ativa",
    "alt3": "Os commits existentes no histórico",
    "alt4": "Os arquivos que foram removidos definitivamente"
  },
  {
    "questao": "O que 'private' indica em uma variável ou método em C#?",
    "alt1": "Que só pode ser acessado dentro da própria classe",
    "alt2": "Que pode ser acessado de qualquer lugar",
    "alt3": "Que pertence ao namespace global",
    "alt4": "Que será convertido em JSON automaticamente"
  },
  {
    "questao": "Como você instancia um objeto de uma classe chamada 'Player' em C#?",
    "alt1": "Player jogador = new Player();",
    "alt2": "Player jogador = Player();",
    "alt3": "jogador = class Player();",
    "alt4": "new Player jogador();"
  },
  {
    "questao": "Em Unity, como você acessa um componente chamado 'Rigidbody' de um GameObject?",
    "alt1": "GetComponent<Rigidbody>()",
    "alt2": "AccessComponent<Rigid>()",
    "alt3": "Find<Rigid>()",
    "alt4": "Component.Get<Rigidbody>()"
  },
  {
    "questao": "No contexto de arquivos JSON, o que significa 'deserializar'?",
    "alt1": "Converter um JSON para um objeto C#",
    "alt2": "Salvar um arquivo JSON em disco",
    "alt3": "Compactar dados para rede",
    "alt4": "Excluir arquivos JSON temporários"
  },
  {
    "questao": "O que o método 'Add()' faz em uma lista do tipo List<string> em C#?",
    "alt1": "Adiciona um novo item ao final da lista",
    "alt2": "Remove o primeiro item da lista",
    "alt3": "Atualiza um item na posição zero",
    "alt4": "Limpa todos os itens da lista"
  },
  {
    "questao": "O que significa 'null' em C#?",
    "alt1": "Ausência de valor ou referência",
    "alt2": "Valor máximo de um inteiro",
    "alt3": "Valor booleano falso",
    "alt4": "Valor que representa um objeto vazio"
  },
  {
    "questao": "Qual palavra-chave define que uma classe pode ser herdada em C#?",
    "alt1": "public",
    "alt2": "sealed",
    "alt3": "static",
    "alt4": "final"
  },
  {
    "questao": "O que faz o comando 'git clone'?",
    "alt1": "Copia um repositório remoto para sua máquina local",
    "alt2": "Apaga a branch local atual",
    "alt3": "Conecta dois repositórios remotos",
    "alt4": "Cria uma nova branch"
  },
  {
    "questao": "Como é feita a leitura de um JSON em Unity usando TextAsset?",
    "alt1": "TextAsset json = Resources.Load<TextAsset>(\"nome\");",
    "alt2": "string json = File.Read(\"nome.json\");",
    "alt3": "LoadAsset<TextAsset>(json);",
    "alt4": "json = GetComponent<TextAsset>();"
  },
  {
    "questao": "No Unity, qual é o principal propósito do método Start()?",
    "alt1": "Executar lógica uma vez no início do script",
    "alt2": "Executar ações toda vez que uma tecla é pressionada",
    "alt3": "Manter o objeto ativo",
    "alt4": "Atualizar valores físicos do Rigidbody"
  },
  {
    "questao": "Como salvar um objeto como JSON em C#?",
    "alt1": "JsonUtility.ToJson(objeto)",
    "alt2": "File.Serialize(objeto)",
    "alt3": "JsonUtility.FromJson(objeto)",
    "alt4": "Save.Json(objeto)"
  },
  {
    "questao": "Em C#, o que significa a palavra-chave 'return'?",
    "alt1": "Finaliza o método e retorna um valor",
    "alt2": "Cria uma repetição dentro do método",
    "alt3": "Remove variáveis da memória",
    "alt4": "Chama outro script"
  },
  {
    "questao": "Para que serve a palavra-chave 'using' em C#?",
    "alt1": "Importar namespaces e gerenciar recursos automaticamente",
    "alt2": "Definir o nome de uma classe",
    "alt3": "Remover referências de memória",
    "alt4": "Criar loops"
  },
  {
    "questao": "Qual comando Git cria uma nova branch chamada 'dev'?",
    "alt1": "git branch dev",
    "alt2": "git new-branch dev",
    "alt3": "git create dev",
    "alt4": "git init dev"
  },
  {
    "questao": "O que acontece se você tentar acessar um componente com GetComponent<T>() em um GameObject que não o possui?",
    "alt1": "Retorna null",
    "alt2": "Lança uma exceção",
    "alt3": "Cria automaticamente o componente",
    "alt4": "Reinicia a cena"
  },
  {
    "questao": "No contexto de programação orientada a objetos, o que é uma classe abstrata?",
    "alt1": "Uma classe que não pode ser instanciada diretamente",
    "alt2": "Uma classe que só contém atributos",
    "alt3": "Uma classe que herda tudo de outra sem alterar nada",
    "alt4": "Uma classe que só serve para testes"
  },
  {
    "questao": "Qual é o principal objetivo do método Awake() no Unity?",
    "alt1": "Inicializar variáveis antes do Start",
    "alt2": "Atualizar a física do objeto",
    "alt3": "Criar novos GameObjects",
    "alt4": "Chamar funções do Update manualmente"
  },
  {
    "questao": "Como declarar um método assíncrono em C#?",
    "alt1": "async void NomeDoMetodo()",
    "alt2": "await void NomeDoMetodo()",
    "alt3": "task NomeDoMetodo()",
    "alt4": "public start NomeDoMetodo()"
  },
  {
    "questao": "O que o comando 'git commit -m \"mensagem\"' faz?",
    "alt1": "Cria um snapshot das mudanças com uma mensagem descritiva",
    "alt2": "Envia as alterações para o repositório remoto",
    "alt3": "Cria uma nova branch",
    "alt4": "Remove arquivos do repositório"
  },
  {
    "questao": "Para que serve a palavra-chave 'static' em C#?",
    "alt1": "Define membros que pertencem à classe e não à instância",
    "alt2": "Impede a herança da classe",
    "alt3": "Indica que o método deve rodar em outra thread",
    "alt4": "Cria uma variável temporária"
  },
  {
    "questao": "Qual desses é um exemplo válido de foreach em C#?",
    "alt1": "foreach (string nome in nomes) { Debug.Log(nome); }",
    "alt2": "for each (nome in nomes) { print(nome); }",
    "alt3": "foreach nome in nomes { }",
    "alt4": "foreach: nome in nomes -> print(nome)"
  },
  {
    "questao": "Qual método é usado para verificar se um JSON é nulo ou vazio antes de converter?",
    "alt1": "string.IsNullOrEmpty(json)",
    "alt2": "json == false",
    "alt3": "json.NullCheck()",
    "alt4": "json.Validate()"
  },
  {
    "questao": "Qual comando Git recupera atualizações do repositório remoto?",
    "alt1": "git pull",
    "alt2": "git push",
    "alt3": "git update",
    "alt4": "git refresh"
  },
  {
    "questao": "Como declarar uma variável que pode armazenar qualquer tipo de objeto em C#?",
    "alt1": "object variavel = ...;",
    "alt2": "var<> variavel = ...;",
    "alt3": "all variavel = ...;",
    "alt4": "universal variavel = ...;"
  },
  {
    "questao": "Qual dessas estruturas define corretamente uma classe em C#?",
    "alt1": "public class Jogador { }",
    "alt2": "class: Jogador() {}",
    "alt3": "def Jogador {}",
    "alt4": "class Jogador: {}"
  },
  {
    "questao": "O que o 'Content Size Fitter' faz em Unity?",
    "alt1": "Ajusta o tamanho do objeto com base no conteúdo",
    "alt2": "Reduz o lag na UI",
    "alt3": "Impede que o objeto UI se mova",
    "alt4": "Cria múltiplas cópias do conteúdo"
  },
  {
    "questao": "Como você define um dicionário em C# com chave string e valor int?",
    "alt1": "Dictionary<string, int> meuDicionario = new Dictionary<string, int>();",
    "alt2": "var meuDicionario = List<string, int>();",
    "alt3": "dict<string, int> meuDicionario;",
    "alt4": "int<string> meuDicionario = dict();"
  },
  {
    "questao": "Para que serve a função 'TryParse()' em C#?",
    "alt1": "Converte strings em números com segurança, evitando exceções",
    "alt2": "Cria strings a partir de números",
    "alt3": "Gera exceções para strings inválidas",
    "alt4": "Executa código condicional"
  },
  {
    "questao": "Qual função do Git exibe o histórico de commits?",
    "alt1": "git log",
    "alt2": "git status",
    "alt3": "git commits",
    "alt4": "git track"
  },
  {
    "questao": "Como impedir que um GameObject seja destruído ao trocar de cena?",
    "alt1": "DontDestroyOnLoad(objeto);",
    "alt2": "SetPersistent(objeto);",
    "alt3": "KeepAlive(objeto);",
    "alt4": "NoDestroy(objeto);"
  },
  {
    "questao": "Como acessar uma variável pública de outro script em Unity?",
    "alt1": "nomeScript.variavel",
    "alt2": "public.nomeScript.variavel",
    "alt3": "this.Get(variavel)",
    "alt4": "ReadOnly(nomeScript)"
  },
  {
    "questao": "Para que serve o método 'StartCoroutine' em Unity?",
    "alt1": "Executar uma função de forma assíncrona no tempo",
    "alt2": "Criar um novo GameObject",
    "alt3": "Salvar um arquivo",
    "alt4": "Interromper um processo"
  },
  {
    "questao": "Como comparar se duas strings são iguais em C#?",
    "alt1": "if (a == b)",
    "alt2": "if (a.Equals(b) == false)",
    "alt3": "if (a != b)",
    "alt4": "compare(a, b)"
  },
  {
    "questao": "Qual dos seguintes comandos Git desfaz as alterações em um arquivo modificado?",
    "alt1": "git checkout -- nome-do-arquivo",
    "alt2": "git remove nome-do-arquivo",
    "alt3": "git clear nome-do-arquivo",
    "alt4": "git undo nome-do-arquivo"
  },
  {
    "questao": "O que o método FromJson<T>() faz em C# com Unity?",
    "alt1": "Converte uma string JSON em um objeto do tipo T",
    "alt2": "Transforma objetos em scripts",
    "alt3": "Gera arquivos de imagem com dados JSON",
    "alt4": "Desinstala componentes JSON do sistema"
  },
  {
    "questao": "Como declarar uma propriedade automática em C#?",
    "alt1": "public int Id { get; set; }",
    "alt2": "int Id() => get set;",
    "alt3": "var Id = property();",
    "alt4": "property int Id;"
  },
  {
    "questao": "No Unity, o que o método GetComponent<T>() retorna se o componente não existir?",
    "alt1": "null",
    "alt2": "0",
    "alt3": "false",
    "alt4": "Exceção"
  },
  {
    "questao": "Para que serve a palavra-chave 'override' em C#?",
    "alt1": "Sobrescreve um método virtual da classe base",
    "alt2": "Cria uma nova classe a partir da atual",
    "alt3": "Impede o uso de herança",
    "alt4": "Transforma o método em estático"
  },
  {
    "questao": "Como executar um comando apenas uma vez ao iniciar um objeto no Unity?",
    "alt1": "Coloque o código no método Start()",
    "alt2": "Coloque no método Update()",
    "alt3": "Use o método FixedUpdate()",
    "alt4": "Crie um botão com evento OnClick"
  },
  {
    "questao": "O que o comando 'git init' faz?",
    "alt1": "Cria um novo repositório Git local",
    "alt2": "Envia as alterações para o GitHub",
    "alt3": "Conecta com outro repositório",
    "alt4": "Baixa alterações remotas"
  },
  {
    "questao": "Como declarar um array de strings em C# com 3 posições?",
    "alt1": "string[] nomes = new string[3];",
    "alt2": "string nomes = {3};",
    "alt3": "array<string> nomes = 3;",
    "alt4": "string nomes[] = [3];"
  },
  {
    "questao": "Qual das opções a seguir define corretamente uma interface em C#?",
    "alt1": "public interface IVeiculo { void Mover(); }",
    "alt2": "interface = IVeiculo() { Mover() }",
    "alt3": "define interface IVeiculo { function Mover(); }",
    "alt4": "interface IVeiculo { method Mover; }"
  },
  {
    "questao": "O que acontece se você chamar Destroy(gameObject) no Unity?",
    "alt1": "O GameObject será destruído da cena",
    "alt2": "O objeto se torna invisível, mas continua ativo",
    "alt3": "O componente Renderer é removido",
    "alt4": "O GameObject muda de cena"
  },
  {
    "questao": "Para que serve o método JsonUtility.ToJson(objeto)?",
    "alt1": "Transforma um objeto em string JSON",
    "alt2": "Executa um JSON em tempo real",
    "alt3": "Verifica se um JSON tem erro",
    "alt4": "Adiciona JSON ao console"
  },
  {
    "questao": "Como declarar uma lista de inteiros em C#?",
    "alt1": "List<int> numeros = new List<int>();",
    "alt2": "list int numeros = {}",
    "alt3": "List numeros<int> = []",
    "alt4": "int list = (1,2,3);"
  },
  {
    "questao": "O que o comando 'git status' exibe?",
    "alt1": "Mostra arquivos modificados e prontos para commit",
    "alt2": "Executa o commit atual",
    "alt3": "Atualiza os arquivos do repositório",
    "alt4": "Apaga arquivos desnecessários"
  },
  {
    "questao": "O que acontece quando uma classe herda de outra em C#?",
    "alt1": "Ela passa a ter acesso aos métodos e atributos da classe base",
    "alt2": "A classe base é excluída",
    "alt3": "A classe derivada é convertida em interface",
    "alt4": "Não é possível acessar atributos públicos"
  },
  {
    "questao": "Como instanciar um prefab no Unity por código?",
    "alt1": "Instantiate(prefab);",
    "alt2": "new(prefab);",
    "alt3": "GameObject.Create(prefab);",
    "alt4": "clone(prefab);"
  },
  {
    "questao": "Qual é o retorno padrão de um método que não retorna nada em C#?",
    "alt1": "void",
    "alt2": "null",
    "alt3": "return",
    "alt4": "empty"
  },
  {
    "questao": "Como impedir que um campo apareça no Inspector do Unity?",
    "alt1": "[HideInInspector]",
    "alt2": "[Invisible]",
    "alt3": "[PrivateOnly]",
    "alt4": "[SkipEditor]"
  },
  {
    "questao": "Qual é a função da palavra 'public' em uma variável ou método?",
    "alt1": "Permite acesso de qualquer outro script",
    "alt2": "Deixa a variável só visível no Inspector",
    "alt3": "Impede que o código rode automaticamente",
    "alt4": "Cria uma variável temporária"
  },
  {
    "questao": "O que acontece ao usar um foreach em uma lista?",
    "alt1": "Percorre cada item da lista uma vez",
    "alt2": "Cria uma nova lista",
    "alt3": "Remove itens duplicados",
    "alt4": "Garante que a lista fique em ordem"
  },
  {
    "questao": "Qual comando Git cria uma nova branch?",
    "alt1": "git branch nome-da-branch",
    "alt2": "git new nome-da-branch",
    "alt3": "git start nome-da-branch",
    "alt4": "git create branch nome"
  },
  {
    "questao": "Para que serve o operador '??' em C#?",
    "alt1": "Define valor padrão caso o valor anterior seja nulo",
    "alt2": "Verifica se uma string está vazia",
    "alt3": "Compara dois números inteiros",
    "alt4": "Concatena variáveis de texto"
  },
  {
    "questao": "O que é encapsulamento na Programação Orientada a Objetos?",
    "alt1": "É o ato de esconder os dados internos de um objeto e expô-los apenas por meio de métodos públicos",
    "alt2": "É quando um objeto herda propriedades de outro",
    "alt3": "É o uso de várias classes ao mesmo tempo",
    "alt4": "É a organização do código em arquivos diferentes"
  },
  {
    "questao": "Qual palavra-chave em C# define que uma classe pode ser herdada por outra?",
    "alt1": "class",
    "alt2": "extends",
    "alt3": "inherits",
    "alt4": "base"
  },
  {
    "questao": "O que é polimorfismo em C#?",
    "alt1": "É a capacidade de um método se comportar de diferentes formas dependendo do contexto",
    "alt2": "É a criação de múltiplas instâncias de uma mesma classe",
    "alt3": "É a exclusão de atributos da classe",
    "alt4": "É a transformação de uma variável em constante"
  },
  {
    "questao": "Como definimos um construtor em uma classe C#?",
    "alt1": "Criando um método com o mesmo nome da classe, sem tipo de retorno",
    "alt2": "Usando a palavra 'init'",
    "alt3": "Criando um método chamado main",
    "alt4": "Declarando o método como estático"
  },
  {
    "questao": "O que é herança na POO?",
    "alt1": "É quando uma classe deriva de outra e herda seus membros",
    "alt2": "É quando duas classes compartilham um mesmo método",
    "alt3": "É o processo de copiar métodos de uma classe para outra manualmente",
    "alt4": "É quando usamos interfaces em vez de classes"
  },
  {
    "questao": "Qual palavra-chave usamos para herdar uma classe em C#?",
    "alt1": ":",
    "alt2": "inherits",
    "alt3": "extends",
    "alt4": "->"
  },
  {
    "questao": "Em C#, o que a palavra 'base' faz em uma classe filha?",
    "alt1": "Acessa membros da classe pai",
    "alt2": "Define que a classe é pai de outras",
    "alt3": "Cria uma nova instância da classe pai",
    "alt4": "Bloqueia a herança"
  },
  {
    "questao": "Como declarar um método virtual que pode ser sobrescrito?",
    "alt1": "public virtual void Metodo()",
    "alt2": "override Metodo()",
    "alt3": "new Metodo()",
    "alt4": "abstract Metodo()"
  },
  {
    "questao": "O que acontece se você tentar herdar de uma classe marcada como 'sealed'?",
    "alt1": "Vai gerar erro de compilação",
    "alt2": "Vai sobrescrever todos os métodos automaticamente",
    "alt3": "Vai criar uma classe estática",
    "alt4": "Vai apagar a classe original"
  },
  {
    "questao": "O que a palavra-chave 'this' representa em C#?",
    "alt1": "A instância atual da classe",
    "alt2": "A classe pai",
    "alt3": "Um objeto externo",
    "alt4": "A thread principal"
  },
  {
    "questao": "O que são propriedades em C#?",
    "alt1": "Mecanismos que encapsulam campos, permitindo controle de leitura e escrita",
    "alt2": "Atributos públicos da classe",
    "alt3": "Parâmetros passados para métodos",
    "alt4": "Objetos internos da classe"
  },
  {
    "questao": "Qual a diferença entre 'public', 'private' e 'protected'?",
    "alt1": "Eles definem o nível de acesso aos membros da classe",
    "alt2": "Servem apenas para métodos estáticos",
    "alt3": "Limitam o uso de namespaces",
    "alt4": "Definem a ordem de execução dos métodos"
  },
  {
    "questao": "O que define um método abstrato em C#?",
    "alt1": "Ele não tem corpo e deve ser implementado pelas classes derivadas",
    "alt2": "É opcional ser implementado",
    "alt3": "É um método com retorno fixo",
    "alt4": "Só pode ser usado em classes seladas"
  },
  {
    "questao": "O que acontece se uma classe abstrata não tiver todos os métodos implementados?",
    "alt1": "Ela não pode ser instanciada diretamente",
    "alt2": "Ela executa mesmo assim",
    "alt3": "Ela gera um erro de runtime",
    "alt4": "Ela se transforma em interface"
  },
  {
    "questao": "Para que servem interfaces na POO?",
    "alt1": "Definem contratos que as classes devem seguir",
    "alt2": "Executam métodos automaticamente",
    "alt3": "Armazenam objetos de forma global",
    "alt4": "Impedem que classes sejam instanciadas"
  },
  {
    "questao": "O que é um método estático em C#?",
    "alt1": "É acessado sem instanciar a classe",
    "alt2": "É um método que não pode retornar valor",
    "alt3": "É um método usado apenas por classes herdadas",
    "alt4": "É um método que roda em segundo plano"
  },
  {
    "questao": "É possível herdar múltiplas classes em C#?",
    "alt1": "Não, mas é possível implementar várias interfaces",
    "alt2": "Sim, usando vírgula para separar",
    "alt3": "Sim, com a palavra 'multiple'",
    "alt4": "Apenas em métodos estáticos"
  },
  {
    "questao": "Qual o papel de um construtor?",
    "alt1": "Inicializar os valores quando o objeto é criado",
    "alt2": "Destruir objetos da memória",
    "alt3": "Criar métodos internos",
    "alt4": "Instanciar uma interface automaticamente"
  },
  {
    "questao": "Como sobrescrever um método herdado?",
    "alt1": "Usando 'override' na classe filha",
    "alt2": "Declarando como 'new'",
    "alt3": "Usando o mesmo nome sem modificador",
    "alt4": "Escrevendo um novo método com mesmo corpo"
  },
  {
    "questao": "Por que usar herança em C#?",
    "alt1": "Para reaproveitar código entre classes relacionadas",
    "alt2": "Para duplicar atributos",
    "alt3": "Para criar instâncias múltiplas com o mesmo nome",
    "alt4": "Para acessar a RAM de forma otimizada"
  },
  {
    "questao": "O que será impresso no console?\n\nint[] numeros = {2, 4, 6};\nforeach (int num in numeros)\n{\n    Console.Write(num + \" \");\n}",
    "alt1": "2 4 6 ",
    "alt2": "246",
    "alt3": "2\n4\n6",
    "alt4": "Erro de compilação"
  },
  {
    "questao": "Qual é o resultado da execução do código?\n\nint soma = 0;\nfor (int i = 1; i <= 3; i++)\n{\n    soma += i;\n}\nConsole.WriteLine(soma);",
    "alt1": "6",
    "alt2": "3",
    "alt3": "10",
    "alt4": "5"
  },
  {
    "questao": "O que o código abaixo faz?\n\nint[] pares = new int[5];\nfor (int i = 0; i < pares.Length; i++)\n{\n    pares[i] = i * 2;\n}",
    "alt1": "Preenche o array com os primeiros 5 números pares",
    "alt2": "Imprime os pares no console",
    "alt3": "Cria um array vazio",
    "alt4": "Multiplica os valores do array original"
  },
  {
    "questao": "Qual a saída do código?\n\nint a = 3, b = 4;\nif (a * b == 12)\n    Console.WriteLine(\"Correto\");\nelse\n    Console.WriteLine(\"Errado\");",
    "alt1": "Correto",
    "alt2": "Errado",
    "alt3": "12",
    "alt4": "Erro de sintaxe"
  },
  {
    "questao": "Analise o código:\n\nint[] array = {1, 2, 3};\nConsole.WriteLine(array[3]);\n\nO que acontece?",
    "alt1": "Lança exceção de índice fora do intervalo",
    "alt2": "Imprime 3",
    "alt3": "Imprime 0",
    "alt4": "Compila mas não imprime nada"
  },
  {
    "questao": "O que será impresso?\n\nint x = 0;\ndo\n{\n    x++;\n    Console.Write(x);\n} while (x < 3);",
    "alt1": "123",
    "alt2": "0123",
    "alt3": "1234",
    "alt4": "Erro"
  },
  {
    "questao": "O que o código abaixo imprime?\n\nint n = 5;\nint f = 1;\nfor (int i = 1; i <= n; i++)\n{\n    f *= i;\n}\nConsole.WriteLine(f);",
    "alt1": "120",
    "alt2": "60",
    "alt3": "25",
    "alt4": "5"
  },
  {
    "questao": "Dado o código:\n\nenum Dias { Domingo, Segunda, Terca, Quarta }\nConsole.WriteLine((int)Dias.Quarta);",
    "alt1": "3",
    "alt2": "4",
    "alt3": "2",
    "alt4": "1"
  },
  {
    "questao": "O que será impresso?\n\nint[] v = {1, 1, 2, 3, 5};\nint total = 0;\nforeach (int i in v)\n{\n    total += i;\n}\nConsole.WriteLine(total);",
    "alt1": "12",
    "alt2": "15",
    "alt3": "11",
    "alt4": "13"
  },
  {
    "questao": "Para que serve o comando 'break' em um laço de repetição?",
    "alt1": "Encerra o laço imediatamente",
    "alt2": "Pula uma iteração",
    "alt3": "Volta ao início do loop",
    "alt4": "Ignora a condição do loop"
  },
  {
    "questao": "Qual seria o valor da variável 'x'?\n\nint x = 1;\nwhile (x < 3)\n{\n    x *= 2;\n}",
    "alt1": "4",
    "alt2": "2",
    "alt3": "3",
    "alt4": "1"
  },
  {
    "questao": "Qual o resultado da tabuada de 2 neste trecho?\n\nfor (int i = 1; i <= 3; i++)\n{\n    Console.Write(2 * i + \" \");\n}",
    "alt1": "2 4 6 ",
    "alt2": "2 3 4 ",
    "alt3": "1 2 3 ",
    "alt4": "4 8 12 "
  },
  {
    "questao": "Analise o código de Fibonacci:\n\nint a = 0, b = 1, c;\nfor (int i = 0; i < 5; i++)\n{\n    c = a + b;\n    Console.Write(c + \" \");\n    a = b;\n    b = c;\n}",
    "alt1": "1 2 3 5 8 ",
    "alt2": "1 1 2 3 5 ",
    "alt3": "0 1 1 2 3 ",
    "alt4": "2 3 5 8 13 "
  },
  {
    "questao": "Qual o valor impresso?\n\nint x = 10;\nint y = 3;\nConsole.WriteLine(x % y);",
    "alt1": "1",
    "alt2": "3",
    "alt3": "0",
    "alt4": "10"
  },
  {
    "questao": "Como chamamos um método em C# com valor de retorno int e sem parâmetros?",
    "alt1": "public int Metodo()",
    "alt2": "int Metodo(string a)",
    "alt3": "static Metodo()",
    "alt4": "void Metodo()"
  },
  {
    "questao": "O que será impresso?\n\nstring nome = \"Kaique\";\nConsole.WriteLine(nome.Length);",
    "alt1": "6",
    "alt2": "5",
    "alt3": "7",
    "alt4": "Erro de compilação"
  },
  {
    "questao": "Para que serve a palavra-chave 'return' em C#?",
    "alt1": "Encerra a execução do método e retorna um valor",
    "alt2": "Declara uma nova variável",
    "alt3": "Cria um loop",
    "alt4": "Cria uma nova classe"
  },
  {
    "questao": "Qual a saída do código?\n\nint[] notas = {7, 8, 9};\nConsole.WriteLine(notas[1]);",
    "alt1": "8",
    "alt2": "7",
    "alt3": "9",
    "alt4": "1"
  },
  {
    "questao": "Em C#, qual estrutura representa um grupo de valores nomeados inteiros?",
    "alt1": "enum",
    "alt2": "list",
    "alt3": "array",
    "alt4": "class"
  },
  {
    "questao": "Como definimos um array de 3 elementos inteiros em C#?",
    "alt1": "int[] numeros = new int[3];",
    "alt2": "array numeros = [3];",
    "alt3": "int numeros(3);",
    "alt4": "new int numeros[3];"
  }
]
