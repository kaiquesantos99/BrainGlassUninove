[
    {
        "questao": "Qual a principal diferença entre o desenvolvimento tradicional e ágil?",
        "alt1": "O modelo ágil é mais flexível e iterativo, enquanto o tradicional segue um planejamento rígido",
        "alt2": "O modelo tradicional é mais rápido que o ágil",
        "alt3": "O desenvolvimento ágil não precisa de planejamento",
        "alt4": "O modelo tradicional não exige documentação"
    },
    {
        "questao": "Qual é um dos principais problemas do modelo tradicional de desenvolvimento de software?",
        "alt1": "Dificuldade em adaptar mudanças ao longo do projeto",
        "alt2": "A falta de um planejamento detalhado",
        "alt3": "Excesso de flexibilidade",
        "alt4": "Menos custo para a empresa"
    },
    {
        "questao": "No desenvolvimento ágil, como os requisitos do projeto são tratados?",
        "alt1": "Eles podem ser modificados ao longo do desenvolvimento de acordo com a necessidade do cliente",
        "alt2": "São definidos no início e não podem ser alterados",
        "alt3": "São estabelecidos apenas pelo gerente do projeto",
        "alt4": "Não há necessidade de requisitos"
    },
    {
        "questao": "Qual das seguintes opções é uma característica do desenvolvimento ágil?",
        "alt1": "Entrega incremental de funcionalidades",
        "alt2": "Foco apenas na documentação",
        "alt3": "Fases rígidas e sequenciais",
        "alt4": "Apenas o gerente do projeto pode tomar decisões"
    },
    {
        "questao": "Qual é a abordagem do modelo tradicional em relação às fases do projeto?",
        "alt1": "As fases são sequenciais e rígidas, sem possibilidade de voltar para etapas anteriores",
        "alt2": "O desenvolvimento ocorre em ciclos iterativos",
        "alt3": "O cliente pode intervir a qualquer momento",
        "alt4": "As equipes trabalham sem planejamento prévio"
    },
    {
      "questao": "Por que o desenvolvimento ágil é considerado mais eficiente para projetos com requisitos dinâmicos?",
      "alt1": "Porque permite ajustes contínuos e priorização do que é mais importante",
      "alt2": "Porque elimina completamente a necessidade de documentação",
      "alt3": "Porque não precisa do envolvimento do cliente",
      "alt4": "Porque reduz a quantidade de reuniões entre a equipe"
    },
    {
      "questao": "No modelo ágil, como o cliente participa do projeto?",
      "alt1": "Ativamente, dando feedback constante e participando de reuniões frequentes",
      "alt2": "Apenas no início, para definir os requisitos",
      "alt3": "O cliente só participa na fase de testes",
      "alt4": "O cliente não tem contato com a equipe durante o desenvolvimento"
    },
    {
      "questao": "No modelo tradicional, qual é o principal objetivo antes de iniciar o desenvolvimento?",
      "alt1": "Definir um planejamento detalhado e fixo",
      "alt2": "Criar protótipos rapidamente",
      "alt3": "Realizar testes antes do desenvolvimento",
      "alt4": "Liberar o código antes de finalizar os requisitos"
    },
    {
      "questao": "Qual dos seguintes modelos de desenvolvimento segue uma abordagem mais rígida e estruturada?",
      "alt1": "Modelo Cascata",
      "alt2": "Scrum",
      "alt3": "Kanban",
      "alt4": "Extreme Programming (XP)"
    },
    {
      "questao": "Por que as empresas estão cada vez mais adotando o desenvolvimento ágil?",
      "alt1": "Porque ele melhora a adaptação a mudanças e entrega valor rapidamente",
      "alt2": "Porque reduz a necessidade de planejamento",
      "alt3": "Porque não exige reuniões com o cliente",
      "alt4": "Porque não precisa de documentação"
    },
    {
      "questao": "O que é o Scrum no contexto de desenvolvimento ágil?",
      "alt1": "Um framework para gerenciamento de projetos baseado em ciclos iterativos e incrementais",
      "alt2": "Um método tradicional de desenvolvimento de software",
      "alt3": "Um software de gestão de equipes",
      "alt4": "Uma ferramenta para controle de versionamento"
    },
    {
      "questao": "Qual é o nome do evento no Scrum onde a equipe planeja o trabalho para o próximo sprint?",
      "alt1": "Sprint Planning",
      "alt2": "Daily Scrum",
      "alt3": "Sprint Review",
      "alt4": "Sprint Retrospective"
    },
    {
      "questao": "O que é um Product Backlog no Scrum?",
      "alt1": "Uma lista priorizada de funcionalidades e requisitos do produto",
      "alt2": "Um documento detalhado com todos os planos do projeto",
      "alt3": "Um relatório de desempenho da equipe",
      "alt4": "Um contrato de requisitos fixos entre o cliente e a equipe"
    },
    {
      "questao": "Qual é o papel do Product Owner no Scrum?",
      "alt1": "Definir e priorizar os itens do Product Backlog",
      "alt2": "Gerenciar a equipe de desenvolvimento diretamente",
      "alt3": "Testar o software após cada sprint",
      "alt4": "Executar as tarefas técnicas de desenvolvimento"
    },
    {
      "questao": "O que acontece na Daily Scrum?",
      "alt1": "Os membros da equipe compartilham o que fizeram, o que farão e os impedimentos",
      "alt2": "A equipe revisa e aprova o código desenvolvido",
      "alt3": "O Scrum Master apresenta métricas de produtividade",
      "alt4": "O cliente aprova as entregas do sprint"
    },
    {
      "questao": "Qual é a principal responsabilidade do Scrum Master?",
      "alt1": "Facilitar o processo Scrum e remover impedimentos da equipe",
      "alt2": "Definir os requisitos do projeto",
      "alt3": "Criar o código-fonte do software",
      "alt4": "Decidir as tecnologias que serão utilizadas"
    },
    {
      "questao": "O que acontece na Sprint Review?",
      "alt1": "A equipe apresenta as entregas do sprint para os stakeholders",
      "alt2": "A equipe define as tarefas do próximo sprint",
      "alt3": "Os desenvolvedores revisam o código uns dos outros",
      "alt4": "O Product Owner define novos requisitos"
    },
    {
      "questao": "Qual a duração recomendada de uma Sprint no Scrum?",
      "alt1": "Entre 1 a 4 semanas",
      "alt2": "1 dia",
      "alt3": "3 meses",
      "alt4": "6 meses"
    },
    {
      "questao": "O que é um Sprint no Scrum?",
      "alt1": "Um ciclo de desenvolvimento de tempo fixo onde um conjunto de funcionalidades é implementado",
      "alt2": "Uma reunião de planejamento de projetos",
      "alt3": "Um evento para revisar retrospectivas do time",
      "alt4": "Uma ferramenta de controle de tarefas"
    },
    {
      "questao": "O que é um Definition of Done (DoD) no Scrum?",
      "alt1": "Critérios que definem quando um item do backlog é considerado completo",
      "alt2": "Uma lista de pendências para o próximo sprint",
      "alt3": "Uma regra para aprovar sprints",
      "alt4": "Um documento fixo estabelecido pelo gerente do projeto"
    },
    {
      "questao": "O que são técnicas ágeis no desenvolvimento de software?",
      "alt1": "Conjuntos de práticas para otimizar processos e melhorar a colaboração no desenvolvimento",
      "alt2": "Um conjunto de regras fixas para desenvolvimento de software",
      "alt3": "Apenas metodologias de gerenciamento de projetos",
      "alt4": "Ferramentas automatizadas para desenvolvimento"
    },
    {
      "questao": "O que é Pair Programming?",
      "alt1": "Uma técnica onde dois desenvolvedores trabalham juntos no mesmo código",
      "alt2": "Uma prática onde um desenvolvedor programa e outro revisa posteriormente",
      "alt3": "Uma forma de alternar entre dois métodos de programação",
      "alt4": "Uma técnica para programar em linguagens diferentes simultaneamente"
    },
    {
      "questao": "O que é Test-Driven Development (TDD)?",
      "alt1": "Uma técnica onde os testes são escritos antes do código",
      "alt2": "Uma prática onde os testes são feitos apenas no final do projeto",
      "alt3": "Um método que descarta a necessidade de testes automatizados",
      "alt4": "Uma abordagem que foca apenas em testes de interface"
    },
    {
      "questao": "Qual a principal vantagem do TDD?",
      "alt1": "Melhora a qualidade do código e reduz bugs",
      "alt2": "Elimina a necessidade de revisão de código",
      "alt3": "Acelera o desenvolvimento sem comprometer a qualidade",
      "alt4": "Permite que o código seja escrito sem planejamento prévio"
    },
    {
      "questao": "O que significa Continuous Integration (CI)?",
      "alt1": "Prática onde mudanças no código são integradas frequentemente ao repositório principal",
      "alt2": "Uma técnica para desenvolver software sem branches",
      "alt3": "Uma estratégia para evitar testes durante o desenvolvimento",
      "alt4": "Uma abordagem para reduzir a necessidade de deploys"
    },
    {
      "questao": "O que é Refatoração de Código?",
      "alt1": "Melhoria no código sem alterar seu comportamento funcional",
      "alt2": "Remoção de funcionalidades antigas do sistema",
      "alt3": "Processo de migração do código para uma nova linguagem",
      "alt4": "Criação de novos módulos sem reutilizar código"
    },
    {
      "questao": "Qual é um dos principais objetivos da refatoração?",
      "alt1": "Melhorar a legibilidade e manutenção do código",
      "alt2": "Remover código não utilizado e arquivos temporários",
      "alt3": "Diminuir a velocidade do desenvolvimento para garantir qualidade",
      "alt4": "Tornar o código mais complexo para evitar cópias"
    },
    {
      "questao": "O que é um Spike no desenvolvimento ágil?",
      "alt1": "Uma investigação rápida para entender ou testar uma solução técnica",
      "alt2": "Uma reunião para avaliar a velocidade do time",
      "alt3": "Uma técnica para estimar tarefas futuras",
      "alt4": "Um método para medir o desempenho da equipe"
    },
    {
      "questao": "O que é a prática de Code Review?",
      "alt1": "Revisão do código por outro desenvolvedor para garantir qualidade e boas práticas",
      "alt2": "Avaliação do código feita pelo Product Owner",
      "alt3": "Uma análise feita apenas após o software ser entregue",
      "alt4": "Uma reunião para decidir quais tecnologias usar"
    },
    {
      "questao": "O que é a técnica de Kanban?",
      "alt1": "Um sistema visual para gerenciamento de fluxo de trabalho",
      "alt2": "Uma metodologia de desenvolvimento de software",
      "alt3": "Uma ferramenta exclusiva do Scrum",
      "alt4": "Uma prática usada apenas para testes automatizados"
    },
    {
      "questao": "O que são ferramentas de auxílio no desenvolvimento ágil?",
      "alt1": "Softwares e práticas que ajudam a gerenciar, automatizar e melhorar o fluxo de trabalho",
      "alt2": "Apenas ferramentas de controle de versão",
      "alt3": "Softwares usados exclusivamente para testes automatizados",
      "alt4": "Qualquer ferramenta utilizada para desenvolver código"
    },
    {
      "questao": "Qual das seguintes opções é um exemplo de ferramenta de controle de versão?",
      "alt1": "Git",
      "alt2": "Jira",
      "alt3": "Trello",
      "alt4": "Slack"
    },
    {
      "questao": "Para que serve uma ferramenta de integração contínua (CI/CD)?",
      "alt1": "Automatizar a integração de código e a entrega contínua de software",
      "alt2": "Gerenciar reuniões de equipe",
      "alt3": "Acompanhar o tempo gasto por cada desenvolvedor",
      "alt4": "Realizar testes de interface do usuário"
    },
    {
      "questao": "Qual ferramenta é frequentemente usada para gerenciamento de projetos ágeis?",
      "alt1": "Jira",
      "alt2": "MySQL",
      "alt3": "Visual Studio",
      "alt4": "Notepad++"
    },
    {
      "questao": "Qual das seguintes ferramentas é utilizada para comunicação e colaboração entre equipes ágeis?",
      "alt1": "Slack",
      "alt2": "Oracle",
      "alt3": "Power BI",
      "alt4": "Docker"
    },
    {
      "questao": "O que é o Trello e como ele auxilia equipes ágeis?",
      "alt1": "Uma ferramenta baseada em Kanban para organizar tarefas e fluxos de trabalho",
      "alt2": "Uma IDE para desenvolvimento de software",
      "alt3": "Um banco de dados relacional",
      "alt4": "Uma linguagem de programação usada em métodos ágeis"
    },
    {
      "questao": "Qual das opções abaixo é uma vantagem de usar ferramentas de versionamento como o Git?",
      "alt1": "Permite o trabalho colaborativo e rastreamento de mudanças no código",
      "alt2": "Evita a necessidade de realizar testes",
      "alt3": "Elimina a necessidade de planejamento",
      "alt4": "Substitui completamente a necessidade de reuniões"
    },
    {
      "questao": "Qual é a principal vantagem de usar ferramentas de automação de testes?",
      "alt1": "Aumentam a confiabilidade e reduzem o tempo de testes manuais",
      "alt2": "Eliminam a necessidade de desenvolvedores",
      "alt3": "Permitem desenvolver sem precisar testar o código",
      "alt4": "Evita que mudanças no código precisem ser revisadas"
    },
    {
      "questao": "Qual ferramenta pode ser usada para gerenciar repositórios Git remotamente?",
      "alt1": "GitHub",
      "alt2": "PostgreSQL",
      "alt3": "Power BI",
      "alt4": "Jira"
    },
    {
      "questao": "O que é o Docker e como ele auxilia no desenvolvimento ágil?",
      "alt1": "Uma plataforma que permite criar e gerenciar containers para aplicações",
      "alt2": "Um framework exclusivo para testes unitários",
      "alt3": "Uma ferramenta de automação para escrever código",
      "alt4": "Uma linguagem de programação usada para definir requisitos"
    },
    {
        "questao": "De onde vem o termo 'Scrum'?",
        "alt1": "De uma jogada do Rugby, representando trabalho em equipe",
        "alt2": "De um termo técnico de desenvolvimento de software",
        "alt3": "De um conceito matemático aplicado à gestão de projetos",
        "alt4": "De um framework específico criado pelo PMI"
    },
    {
        "questao": "Quem são os principais criadores do Scrum?",
        "alt1": "Jeff Sutherland e Ken Schwaber",
        "alt2": "Nonaka e Takeuchi",
        "alt3": "Martin Fowler e Robert C. Martin",
        "alt4": "Kent Beck e Ward Cunningham"
    },
    {
        "questao": "Qual é a principal abordagem do Scrum?",
        "alt1": "Empírica, baseada em adaptação e inspeção contínua",
        "alt2": "Prescritiva, com regras rígidas para desenvolvimento",
        "alt3": "Cascata, com fases definidas e sequenciais",
        "alt4": "Baseada em documentações extensivas antes do início do projeto"
    },
    {
        "questao": "Qual é o principal objetivo do Scrum no desenvolvimento de software?",
        "alt1": "Permitir flexibilidade e adaptação a mudanças frequentes",
        "alt2": "Eliminar a necessidade de planejamento prévio",
        "alt3": "Acelerar entregas sem comprometer qualidade",
        "alt4": "Evitar interação entre membros da equipe para maior produtividade"
    },
    {
        "questao": "O que é o Scrum Guide?",
        "alt1": "Um documento que descreve as boas práticas e valores do Scrum",
        "alt2": "Uma ferramenta de software para gerenciar times ágeis",
        "alt3": "Uma certificação para desenvolvedores Scrum",
        "alt4": "Um relatório sobre produtividade em projetos ágeis"
    },
    {
        "questao": "Quais são os cinco valores do Scrum?",
        "alt1": "Coragem, Foco, Comprometimento, Respeito e Abertura",
        "alt2": "Planejamento, Execução, Controle, Documentação e Testes",
        "alt3": "Autonomia, Flexibilidade, Criatividade, Velocidade e Adaptação",
        "alt4": "Objetividade, Eficiência, Qualidade, Rigor e Comunicação"
    },
    {
        "questao": "O que significa 'Controle Empírico de Processo' no Scrum?",
        "alt1": "O desenvolvimento baseado em transparência, inspeção e adaptação",
        "alt2": "A centralização das decisões no Scrum Master",
        "alt3": "O gerenciamento rígido de cada tarefa para evitar erros",
        "alt4": "A separação completa entre planejamento e execução"
    },
    {
        "questao": "O que significa Time-Boxing no Scrum?",
        "alt1": "A definição de um tempo fixo para reuniões e eventos Scrum",
        "alt2": "A organização do backlog do produto por tempo de desenvolvimento",
        "alt3": "O tempo máximo permitido para mudanças no projeto",
        "alt4": "O período necessário para planejar um projeto Scrum"
    },
    {
        "questao": "Qual é a função do Product Owner?",
        "alt1": "Maximizar o valor do produto e priorizar o Product Backlog",
        "alt2": "Gerenciar diretamente a equipe de desenvolvimento",
        "alt3": "Definir a arquitetura do software",
        "alt4": "Escrever os testes automatizados do sistema"
    },
    {
        "questao": "Qual é o papel do Scrum Master?",
        "alt1": "Facilitar a aplicação do Scrum, removendo impedimentos para a equipe",
        "alt2": "Definir os requisitos técnicos do projeto",
        "alt3": "Gerenciar os prazos e custos do projeto",
        "alt4": "Ser o responsável pelo desenvolvimento do código-fonte"
    },
    {
        "questao": "Qual é o principal papel do Scrum Team?",
        "alt1": "Ser auto-organizado e responsável pelo desenvolvimento do produto",
        "alt2": "Executar tarefas apenas conforme orientações do gerente de projetos",
        "alt3": "Definir os objetivos do negócio sem consultar o cliente",
        "alt4": "Criar o planejamento inicial e repassá-lo ao Product Owner"
    },
    {
        "questao": "O que acontece na Daily Scrum?",
        "alt1": "Os membros da equipe compartilham o que fizeram, o que farão e impedimentos",
        "alt2": "O Product Owner apresenta novas funcionalidades para a equipe",
        "alt3": "A equipe revisa e aprova o código desenvolvido",
        "alt4": "O Scrum Master define as próximas tarefas dos desenvolvedores"
    },
    {
        "questao": "O que é um Sprint no Scrum?",
        "alt1": "Um ciclo de desenvolvimento de tempo fixo onde funcionalidades são implementadas",
        "alt2": "Um evento de revisão do código do time",
        "alt3": "Uma ferramenta para medir a produtividade individual dos desenvolvedores",
        "alt4": "Um método de estimativa para definir prazos"
    },
    {
        "questao": "O que acontece na Sprint Review?",
        "alt1": "A equipe apresenta as entregas do Sprint para os stakeholders",
        "alt2": "A equipe define as tarefas do próximo Sprint",
        "alt3": "Os desenvolvedores revisam o código uns dos outros",
        "alt4": "O Scrum Master revisa o desempenho individual de cada membro"
    },
    {
        "questao": "Qual é a função da Sprint Retrospective?",
        "alt1": "Analisar o que foi bom e o que pode ser melhorado para o próximo Sprint",
        "alt2": "Definir os requisitos para o próximo Sprint",
        "alt3": "Aprovar ou rejeitar funcionalidades desenvolvidas",
        "alt4": "Fazer ajustes na arquitetura do software"
    },
    {
        "questao": "Qual é a duração recomendada de uma Sprint no Scrum?",
        "alt1": "Entre 1 a 4 semanas",
        "alt2": "1 dia",
        "alt3": "3 meses",
        "alt4": "6 meses"
    },
    {
        "questao": "O que é o Definition of Done (DoD) no Scrum?",
        "alt1": "Critérios que definem quando um item do backlog é considerado completo",
        "alt2": "Uma lista de pendências para o próximo Sprint",
        "alt3": "Uma regra para aprovar Sprints",
        "alt4": "Um documento fixo estabelecido pelo gerente do projeto"
    },
    {
        "questao": "Qual das seguintes opções é um princípio do Scrum?",
        "alt1": "Colaboração entre os membros do time",
        "alt2": "Planejamento fixo e rígido antes do início do projeto",
        "alt3": "Documentação extensiva antes da implementação",
        "alt4": "Separação entre as fases de desenvolvimento e testes"
    },
    {
        "questao": "Como o Scrum trata mudanças nos requisitos?",
        "alt1": "Aceita mudanças durante o desenvolvimento para entregar mais valor ao cliente",
        "alt2": "Rejeita mudanças após o início do projeto",
        "alt3": "Permite mudanças apenas no início do projeto",
        "alt4": "Exige um novo planejamento completo para cada mudança"
    },
    {
        "questao": "Qual é a importância da auto-organização no Scrum?",
        "alt1": "Permite que o time tome decisões e aumente a produtividade",
        "alt2": "Garante que cada membro trabalhe isoladamente",
        "alt3": "Evita a necessidade de reuniões e planejamento",
        "alt4": "Substitui a função do Product Owner"
    },
    {
        "questao": "Qual é a importância da comunicação no Scrum?",
        "alt1": "Promover transparência, colaboração e melhoria contínua",
        "alt2": "Garantir que apenas o Scrum Master tenha informações do projeto",
        "alt3": "Evitar mudanças durante o desenvolvimento",
        "alt4": "Manter os requisitos fixos até a entrega final"
    },
    {
        "questao": "Quais são os cinco eventos principais no Scrum?",
        "alt1": "Sprint, Reunião de Planejamento do Sprint, Reuniões Diárias, Revisão do Sprint e Retrospectiva do Sprint",
        "alt2": "Sprint, Code Review, Daily Scrum, Teste Unitário e Planejamento",
        "alt3": "Sprint, Documentação, Reuniões Semanais, Aprovação Final e Retrospectiva",
        "alt4": "Planejamento Geral, Sprint, Reuniões de Aprovação, Revisão Final e Testes de Aceitação"
    },
    {
        "questao": "O que é um Sprint no Scrum?",
        "alt1": "Um ciclo de desenvolvimento de tempo fixo para entrega de incrementos do produto",
        "alt2": "Uma reunião para definir requisitos do projeto",
        "alt3": "Uma etapa onde apenas testes são realizados",
        "alt4": "Uma fase para documentar os processos antes da entrega final"
    },
    {
        "questao": "O que é Time-Boxing no Scrum?",
        "alt1": "Definição de um tempo fixo para execução de eventos e atividades",
        "alt2": "Um prazo final obrigatório para todo o projeto",
        "alt3": "Um tempo extra para correções e retrabalho",
        "alt4": "Uma ferramenta para estimar o tempo de cada tarefa individualmente"
    },
    {
        "questao": "Qual é o objetivo da Reunião de Planejamento do Sprint?",
        "alt1": "Definir quais itens do backlog serão trabalhados e como serão desenvolvidos",
        "alt2": "Apresentar o produto finalizado para os stakeholders",
        "alt3": "Fazer um retrospecto do Sprint anterior",
        "alt4": "Criar documentação detalhada antes de iniciar o Sprint"
    },
    {
        "questao": "Quem participa da Reunião de Planejamento do Sprint?",
        "alt1": "Product Owner, Scrum Master e Scrum Team",
        "alt2": "Apenas o Scrum Master",
        "alt3": "Somente o Product Owner e a gerência",
        "alt4": "Todos os stakeholders da empresa"
    },
    {
        "questao": "Quais são as três perguntas básicas da Reunião Diária (Daily Scrum)?",
        "alt1": "O que fiz ontem? O que farei hoje? Há algum impedimento?",
        "alt2": "Quais bugs encontrei? Quando será o próximo Sprint? O que foi planejado?",
        "alt3": "Quais mudanças podemos fazer? Quem é o responsável pelo código? O que está atrasado?",
        "alt4": "Quantas horas trabalhamos? Quem lidera o time? O que pode ser descartado?"
    },
    {
        "questao": "Qual é a duração recomendada para a Reunião Diária?",
        "alt1": "15 minutos",
        "alt2": "1 hora",
        "alt3": "45 minutos",
        "alt4": "30 minutos"
    },
    {
        "questao": "O que acontece na Revisão do Sprint?",
        "alt1": "A equipe apresenta o que foi desenvolvido para stakeholders e Product Owner",
        "alt2": "Os desenvolvedores revisam o código uns dos outros",
        "alt3": "A equipe analisa problemas técnicos que surgiram durante o Sprint",
        "alt4": "O Scrum Master decide o que será entregue na próxima Sprint"
    },
    {
        "questao": "Quem aprova ou rejeita as entregas da Revisão do Sprint?",
        "alt1": "Product Owner",
        "alt2": "Scrum Master",
        "alt3": "Scrum Team",
        "alt4": "Cliente"
    },
    {
        "questao": "Qual é o objetivo da Retrospectiva do Sprint?",
        "alt1": "Analisar o que deu certo, o que pode melhorar e definir ações para otimizar o próximo Sprint",
        "alt2": "Fazer correções no código antes da entrega final",
        "alt3": "Avaliar individualmente cada membro da equipe",
        "alt4": "Criar um novo planejamento detalhado para os próximos seis meses"
    },
    {
        "questao": "Qual a diferença entre Revisão do Sprint e Retrospectiva do Sprint?",
        "alt1": "A Revisão foca no produto entregue, enquanto a Retrospectiva foca na melhoria do processo",
        "alt2": "A Retrospectiva serve para revisar código, e a Revisão para validar requisitos",
        "alt3": "A Revisão acontece no início do Sprint e a Retrospectiva no final",
        "alt4": "Não há diferença, ambos têm o mesmo objetivo"
    },
    {
        "questao": "Quem deve participar da Retrospectiva do Sprint?",
        "alt1": "Toda a equipe Scrum",
        "alt2": "Apenas o Product Owner",
        "alt3": "Apenas o Scrum Master",
        "alt4": "A equipe de testes e o Scrum Master"
    },
    {
        "questao": "Qual a importância do time-boxing na Retrospectiva do Sprint?",
        "alt1": "Garante que a reunião tenha um tempo fixo e objetivo",
        "alt2": "Evita que a equipe tome decisões sem o Scrum Master",
        "alt3": "Determina a quantidade de tarefas que devem ser realizadas",
        "alt4": "Define um limite de tempo para cada participante falar"
    },
    {
        "questao": "Como as reuniões diárias ajudam a equipe Scrum?",
        "alt1": "Facilitam a comunicação, identificam impedimentos e alinham o trabalho diário",
        "alt2": "Servem para registrar a produtividade de cada membro",
        "alt3": "Substituem a necessidade de reuniões de planejamento",
        "alt4": "Eliminam a necessidade de um Product Owner"
    },
    {
        "questao": "Qual evento do Scrum é voltado para avaliar e otimizar os processos internos da equipe?",
        "alt1": "Retrospectiva do Sprint",
        "alt2": "Revisão do Sprint",
        "alt3": "Planejamento do Sprint",
        "alt4": "Daily Scrum"
    },
    {
        "questao": "Qual evento é responsável por definir as tarefas do Sprint?",
        "alt1": "Reunião de Planejamento do Sprint",
        "alt2": "Daily Scrum",
        "alt3": "Revisão do Sprint",
        "alt4": "Retrospectiva do Sprint"
    },
    {
        "questao": "O que acontece se um time-boxing for muito curto?",
        "alt1": "A equipe pode não conseguir finalizar as entregas a tempo",
        "alt2": "O Scrum Master precisará replanejar todo o Sprint",
        "alt3": "A velocidade de desenvolvimento será dobrada",
        "alt4": "O Product Owner precisará redefinir as prioridades"
    },
    {
        "questao": "Qual é o principal objetivo de um Sprint no Scrum?",
        "alt1": "Criar um incremento funcional do produto que possa ser entregue",
        "alt2": "Finalizar toda a documentação do projeto",
        "alt3": "Definir novos requisitos com a equipe",
        "alt4": "Garantir que o código esteja 100% otimizado"
    },
    {
        "questao": "Por que a Revisão do Sprint é importante para o cliente?",
        "alt1": "Permite que o cliente veja e valide o progresso do produto",
        "alt2": "É um momento para revisar a documentação técnica",
        "alt3": "Ajuda a definir o orçamento para a próxima Sprint",
        "alt4": "Evita que a equipe precise fazer testes de aceitação"
    },
    {
        "questao": "O que são os artefatos do Scrum?",
        "alt1": "Indutores de informação que capturam o entendimento compartilhado da equipe",
        "alt2": "Documentos formais para controle de qualidade do projeto",
        "alt3": "Ferramentas de automação para desenvolvimento ágil",
        "alt4": "Regras fixas definidas pelo Scrum Master"
    },
    {
        "questao": "Quais são os três principais artefatos do Scrum?",
        "alt1": "Backlog do Produto, Backlog do Sprint e Incremento do Produto",
        "alt2": "Sprint, Retrospectiva e Product Owner",
        "alt3": "Daily Scrum, Scrum Board e Burndown Chart",
        "alt4": "Planejamento, Execução e Monitoramento"
    },
    {
        "questao": "O que é o Backlog do Produto?",
        "alt1": "Uma lista de requisitos priorizados que evolui ao longo do projeto",
        "alt2": "Um documento fixo de requisitos fechado no início do projeto",
        "alt3": "Uma lista de tarefas concluídas durante o Sprint",
        "alt4": "Um conjunto de regras estabelecidas pelo Scrum Master"
    },
    {
        "questao": "Quem é responsável por gerenciar o Backlog do Produto?",
        "alt1": "Product Owner",
        "alt2": "Scrum Master",
        "alt3": "Scrum Team",
        "alt4": "Cliente"
    },
    {
        "questao": "O que é o Backlog do Sprint?",
        "alt1": "Um subconjunto do Backlog do Produto que contém tarefas do Sprint atual",
        "alt2": "Uma lista de funcionalidades aprovadas pelo cliente",
        "alt3": "O planejamento geral do projeto Scrum",
        "alt4": "Uma lista de impedimentos encontrados no Sprint"
    },
    {
        "questao": "Quem pode modificar o Backlog do Sprint durante o Sprint?",
        "alt1": "A própria equipe de desenvolvimento",
        "alt2": "O Product Owner",
        "alt3": "O Scrum Master",
        "alt4": "Os Stakeholders"
    },
    {
        "questao": "O que é o Incremento do Produto?",
        "alt1": "A soma de todas as funcionalidades concluídas durante o Sprint",
        "alt2": "Uma lista de funcionalidades que ainda precisam ser implementadas",
        "alt3": "Uma ferramenta de controle de tempo no Scrum",
        "alt4": "Uma estimativa de custos do projeto"
    },
    {
        "questao": "Qual é a relação entre o Incremento do Produto e a Definição de Pronto (DoD)?",
        "alt1": "O incremento precisa atender aos critérios da Definição de Pronto para ser aceito",
        "alt2": "A Definição de Pronto define as tarefas que devem ser feitas no Sprint",
        "alt3": "A Definição de Pronto é um relatório gerado no final do projeto",
        "alt4": "O Incremento do Produto não precisa seguir critérios de qualidade"
    },
    {
        "questao": "O que é um Gráfico Burndown no Scrum?",
        "alt1": "Um gráfico que mostra a evolução do trabalho realizado ao longo do Sprint",
        "alt2": "Uma ferramenta para estimar custos do projeto",
        "alt3": "Uma lista de impedimentos encontrados durante o Sprint",
        "alt4": "Uma forma de medir a produtividade individual dos membros da equipe"
    },
    {
        "questao": "O que o Gráfico Burndown ajuda a visualizar?",
        "alt1": "O progresso do Sprint e a quantidade de trabalho restante",
        "alt2": "A velocidade de entrega de cada desenvolvedor",
        "alt3": "A lista de tarefas que precisam ser revisadas",
        "alt4": "Os erros de código encontrados durante os testes"
    },
    {
        "questao": "O que é um Quadro Scrum (Scrum Board)?",
        "alt1": "Uma ferramenta visual para acompanhar o progresso das tarefas no Sprint",
        "alt2": "Uma planilha usada para documentar reuniões diárias",
        "alt3": "Um relatório de desempenho dos desenvolvedores",
        "alt4": "Uma ferramenta usada apenas pelo Scrum Master"
    },
    {
        "questao": "Qual das opções é um formato comum para o Quadro Scrum?",
        "alt1": "Colunas 'To Do', 'Doing' e 'Done'",
        "alt2": "Lista de impedimentos e lista de riscos",
        "alt3": "Relatório de progresso e lista de erros",
        "alt4": "Tarefas aprovadas e tarefas pendentes"
    },
    {
        "questao": "Como o Quadro Scrum pode ser representado?",
        "alt1": "Fisicamente (quadro branco) ou digitalmente (ferramentas como Trello, Jira)",
        "alt2": "Apenas como um documento físico",
        "alt3": "Somente como um relatório gerado no final do Sprint",
        "alt4": "Como um checklist entregue ao cliente"
    },
    {
        "questao": "Quem pode visualizar e atualizar o Quadro Scrum?",
        "alt1": "Toda a equipe de desenvolvimento",
        "alt2": "Apenas o Scrum Master",
        "alt3": "Somente o Product Owner",
        "alt4": "Apenas a gerência"
    },
    {
        "questao": "Por que o Backlog do Produto é considerado um artefato vivo?",
        "alt1": "Porque pode ser atualizado continuamente conforme novas necessidades surgem",
        "alt2": "Porque é fechado no início do projeto e não muda até o final",
        "alt3": "Porque é um documento formal que precisa de aprovação para qualquer alteração",
        "alt4": "Porque é um contrato fixo que não pode ser alterado"
    },
    {
        "questao": "Qual é a relação entre o Backlog do Produto e a Revisão do Sprint?",
        "alt1": "O feedback do cliente na Revisão do Sprint pode gerar novas demandas para o Backlog do Produto",
        "alt2": "O Backlog do Produto deve ser fechado antes da Revisão do Sprint",
        "alt3": "A Revisão do Sprint define novas prioridades para o Product Owner",
        "alt4": "O Backlog do Produto só pode ser atualizado antes do início de um novo Sprint"
    },
    {
        "questao": "O que acontece com os itens do Backlog do Sprint que não foram concluídos no Sprint atual?",
        "alt1": "Podem ser movidos para o próximo Sprint, caso ainda sejam relevantes",
        "alt2": "São automaticamente descartados",
        "alt3": "Devem ser concluídos obrigatoriamente antes do próximo Sprint",
        "alt4": "Precisam ser aprovados novamente pelo cliente"
    },
    {
        "questao": "O que define a prioridade dos itens no Backlog do Produto?",
        "alt1": "O valor de negócio e as necessidades do cliente",
        "alt2": "A ordem de chegada das solicitações",
        "alt3": "A decisão do Scrum Master",
        "alt4": "A quantidade de tempo necessária para desenvolver cada item"
    },
    {
        "questao": "Como os artefatos do Scrum ajudam no desenvolvimento ágil?",
        "alt1": "Garantem transparência, alinhamento e acompanhamento contínuo do progresso",
        "alt2": "Substituem a necessidade de reuniões da equipe",
        "alt3": "Eliminam a necessidade de um Product Owner",
        "alt4": "Impedem que mudanças sejam feitas no escopo do projeto"
    },
    {
        "questao": "Qual é a principal função do Product Owner em relação aos artefatos do Scrum?",
        "alt1": "Gerenciar e priorizar o Backlog do Produto",
        "alt2": "Definir os critérios técnicos do Incremento do Produto",
        "alt3": "Realizar a Revisão do Sprint sozinho",
        "alt4": "Controlar o tempo de execução das tarefas no Quadro Scrum"
    },
    {
        "questao": "Qual é o objetivo do processo de planejamento no Scrum?",
        "alt1": "Definir expectativas das partes interessadas e sincronizá-las com a equipe",
        "alt2": "Criar um plano rígido e inalterável para o projeto",
        "alt3": "Garantir que todas as entregas sejam feitas sem atrasos",
        "alt4": "Definir todas as funcionalidades do projeto antes do desenvolvimento"
    },
    {
        "questao": "Quais são as três perguntas centrais do planejamento no Scrum?",
        "alt1": "O que mudou financeiramente? Que progresso será feito a cada Sprint? Por que o projeto é um investimento valioso?",
        "alt2": "Qual será o orçamento final? Quem é responsável pelo sucesso? Quando o projeto termina?",
        "alt3": "Quantos membros compõem a equipe? Quem aprova cada etapa? Como os clientes interagem?",
        "alt4": "Quais ferramentas serão usadas? Como será feita a documentação? Quem define os prazos?"
    },
    {
        "questao": "O que é necessário para iniciar um projeto Scrum?",
        "alt1": "Uma visão clara do projeto e um Backlog do Produto",
        "alt2": "Um plano detalhado com todas as funcionalidades já definidas",
        "alt3": "Um orçamento fechado e um cronograma fixo",
        "alt4": "Aprovação de todas as partes interessadas antes do desenvolvimento"
    },
    {
        "questao": "Qual é o papel da visão no planejamento de um projeto Scrum?",
        "alt1": "Descrever os objetivos do projeto e o estado final desejado",
        "alt2": "Definir o orçamento e prazos rígidos para o desenvolvimento",
        "alt3": "Estabelecer os detalhes técnicos antes da implementação",
        "alt4": "Definir as tecnologias que serão usadas no projeto"
    },
    {
        "questao": "Quem é responsável por manter o Product Backlog?",
        "alt1": "Product Owner",
        "alt2": "Scrum Master",
        "alt3": "Scrum Team",
        "alt4": "Stakeholders"
    },
    {
        "questao": "Quais elementos podem ser incluídos no Product Backlog?",
        "alt1": "Características, funções, correções de bugs, melhorias e atualizações tecnológicas",
        "alt2": "Apenas funcionalidades confirmadas pelo cliente",
        "alt3": "Somente requisitos definidos no início do projeto",
        "alt4": "Somente as tarefas a serem executadas no primeiro Sprint"
    },
    {
        "questao": "Quem pode contribuir com novos itens no Product Backlog?",
        "alt1": "Cliente, equipe de projeto, marketing, vendas, gerência e suporte ao cliente",
        "alt2": "Apenas o Product Owner",
        "alt3": "Somente os desenvolvedores",
        "alt4": "Apenas a equipe de testes"
    },
    {
        "questao": "O que é a Estimativa de Esforço no Scrum?",
        "alt1": "Um processo iterativo para estimar o esforço necessário para implementar um item do Backlog",
        "alt2": "Um prazo fixo para completar cada tarefa do projeto",
        "alt3": "Uma avaliação financeira do custo do projeto",
        "alt4": "Um relatório gerado pelo Scrum Master após cada Sprint"
    },
    {
        "questao": "Quem é responsável por executar a Estimativa de Esforço?",
        "alt1": "Product Owner e Scrum Team",
        "alt2": "Apenas o Scrum Master",
        "alt3": "Somente os desenvolvedores",
        "alt4": "A gerência do projeto"
    },
    {
        "questao": "Qual é a principal vantagem do Scrum em comparação com métodos tradicionais de planejamento?",
        "alt1": "Maior flexibilidade para lidar com mudanças e adaptar o projeto continuamente",
        "alt2": "Maior controle sobre cada etapa do desenvolvimento",
        "alt3": "Menos reuniões e menor necessidade de comunicação",
        "alt4": "Documentação detalhada antes do início do projeto"
    },
    {
        "questao": "Por que o Scrum requer menos planejamento detalhado do que métodos tradicionais?",
        "alt1": "Porque o progresso é monitorado a cada Sprint e as mudanças são incorporadas conforme necessário",
        "alt2": "Porque a equipe já sabe tudo o que precisa ser feito antes de começar",
        "alt3": "Porque o Product Owner toma todas as decisões sozinho",
        "alt4": "Porque o Scrum Master controla rigidamente todas as tarefas"
    },
    {
        "questao": "O que acontece no final de cada Sprint em relação ao planejamento?",
        "alt1": "O progresso real do projeto é comparado ao plano inicial",
        "alt2": "O Product Owner decide se o projeto continua ou não",
        "alt3": "O Scrum Master apresenta um relatório finalizado para os stakeholders",
        "alt4": "A equipe entrega um documento formal com as mudanças previstas"
    },
    {
        "questao": "Qual é a relação entre o Scrum e o financiamento do projeto?",
        "alt1": "O plano Scrum ajuda a justificar o investimento ao mostrar progresso contínuo e adaptação",
        "alt2": "O Scrum elimina a necessidade de aprovação de orçamento",
        "alt3": "O financiamento do projeto no Scrum é fixo e imutável",
        "alt4": "Os stakeholders não têm influência no planejamento financeiro"
    },
    {
        "questao": "Por que a transparência é essencial no gerenciamento de projetos Scrum?",
        "alt1": "Permite que as partes interessadas acompanhem o progresso e façam ajustes quando necessário",
        "alt2": "Evita a necessidade de reuniões diárias",
        "alt3": "Ajuda a reduzir custos ao eliminar documentação",
        "alt4": "Mantém os desenvolvedores focados apenas na implementação"
    },
    {
        "questao": "Quais eventos do Scrum garantem a inspeção e adaptação contínua do projeto?",
        "alt1": "Planejamento da Sprint, Reuniões Diárias, Revisão da Sprint e Retrospectiva da Sprint",
        "alt2": "Daily Scrum, Revisão Financeira, Aprovação Final e Fechamento do Projeto",
        "alt3": "Reuniões Quinzenais, Reunião de Gerência, Testes Unitários e Codificação",
        "alt4": "Sprint Zero, Planejamento Mensal, Relatório de Progresso e Feedback do Cliente"
    },
    {
        "questao": "Como o Product Backlog ajuda no alinhamento das partes interessadas?",
        "alt1": "Mantendo uma lista clara e priorizada dos requisitos do projeto",
        "alt2": "Definindo um plano rígido que não pode ser alterado",
        "alt3": "Servindo como um documento finalizado no início do projeto",
        "alt4": "Sendo atualizado apenas no final de cada Sprint"
    },
    {
        "questao": "O que diferencia o planejamento do Scrum de métodos tradicionais como o modelo em cascata?",
        "alt1": "O planejamento é contínuo e ajustável a cada Sprint",
        "alt2": "O Scrum exige que todas as funcionalidades sejam detalhadas antes de começar",
        "alt3": "O Scrum elimina a necessidade de reuniões de planejamento",
        "alt4": "O planejamento no Scrum é fixo e não pode ser alterado após a primeira Sprint"
    },
    {
        "questao": "Por que a estimativa de esforço no Scrum é considerada iterativa?",
        "alt1": "Porque as estimativas são refinadas conforme mais informações ficam disponíveis",
        "alt2": "Porque o tempo para cada tarefa é fixado desde o início",
        "alt3": "Porque o Product Owner decide o esforço necessário para cada item",
        "alt4": "Porque os desenvolvedores estimam apenas no início do projeto"
    },
    {
        "questao": "Como o Scrum aborda mudanças nos requisitos do projeto?",
        "alt1": "Aceita mudanças continuamente para maximizar o valor do produto",
        "alt2": "Evita mudanças após o início do projeto",
        "alt3": "Exige um novo planejamento completo para cada mudança",
        "alt4": "As mudanças só podem ser feitas no final do projeto"
    },
    {
        "questao": "Qual é a principal vantagem da abordagem ágil do Scrum em relação a projetos complexos?",
        "alt1": "Permite adaptação contínua e entrega de valor incremental",
        "alt2": "Elimina a necessidade de reuniões frequentes",
        "alt3": "Acelera o desenvolvimento reduzindo a interação com o cliente",
        "alt4": "Evita retrabalho ao definir todos os requisitos no início do projeto"
    },
    {
        "questao": "O que é uma história de usuário no desenvolvimento ágil?",
        "alt1": "Uma descrição informal e natural de um ou mais recursos do sistema",
        "alt2": "Um documento técnico detalhado sobre o sistema",
        "alt3": "Uma lista de tarefas técnicas para os desenvolvedores",
        "alt4": "Um diagrama UML representando a funcionalidade"
    },
    {
        "questao": "Qual é o principal objetivo de uma história de usuário?",
        "alt1": "Capturar um requisito do sistema da perspectiva do usuário final",
        "alt2": "Definir regras de negócios para a equipe de desenvolvimento",
        "alt3": "Fornecer um modelo para a documentação técnica",
        "alt4": "Controlar os sprints do projeto"
    },
    {
        "questao": "Quais são os três principais elementos de uma história de usuário?",
        "alt1": "Quem, O quê e Por quê",
        "alt2": "Requisitos, Código e Testes",
        "alt3": "Documentação, Design e Implementação",
        "alt4": "Sprint, Backlog e Scrum Master"
    },
    {
        "questao": "Qual das opções abaixo NÃO é um benefício das histórias de usuários?",
        "alt1": "Aprimorar a comunicação entre equipe e cliente",
        "alt2": "Fornecer flexibilidade no desenvolvimento",
        "alt3": "Gerar documentação técnica detalhada",
        "alt4": "Facilitar a priorização dos requisitos"
    },
    {
        "questao": "Onde as histórias de usuários costumam ser registradas?",
        "alt1": "Em cartões, post-its ou softwares de gerenciamento",
        "alt2": "Apenas no backlog do Sprint",
        "alt3": "Somente no código-fonte",
        "alt4": "Em documentos formais aprovados pelo gerente de projetos"
    },
    {
        "questao": "Qual é o formato comum de uma história de usuário?",
        "alt1": "Como um [tipo de usuário], quero [ação desejada] para que [motivo]",
        "alt2": "Se [ação acontecer], então [resultado esperado]",
        "alt3": "[Nome do desenvolvedor] implementará [requisito] no sistema",
        "alt4": "[Gerente do projeto] documentará todas as mudanças no software"
    },
    {
        "questao": "O que significa os 3C’s nas histórias de usuário?",
        "alt1": "Cartão, Conversação e Confirmação",
        "alt2": "Código, Commit e Controle de Versão",
        "alt3": "Cliente, Controle e Conclusão",
        "alt4": "Comprometimento, Comunicação e Conformidade"
    },
    {
        "questao": "O que define o ciclo de vida de uma história de usuário?",
        "alt1": "Uma sequência de estados desde a criação até a conclusão da funcionalidade",
        "alt2": "O tempo de duração de um Sprint",
        "alt3": "A fase de testes do sistema",
        "alt4": "A quantidade de desenvolvedores envolvidos"
    },
    {
        "questao": "Qual é a primeira etapa do ciclo de vida de uma história de usuário?",
        "alt1": "Pendente",
        "alt2": "A fazer",
        "alt3": "Em desenvolvimento",
        "alt4": "Concluído"
    },
    {
        "questao": "O que acontece quando uma história de usuário está no estado 'A Fazer'?",
        "alt1": "Ela foi priorizada para um Sprint e será trabalhada em breve",
        "alt2": "Ela já foi implementada e está pronta para entrega",
        "alt3": "Ela ainda não foi identificada no backlog",
        "alt4": "Ela já está sendo testada pelos usuários"
    },
    {
        "questao": "O que ocorre no estado 'Em Discussão' de uma história de usuário?",
        "alt1": "Usuários e equipe de desenvolvimento esclarecem os requisitos e definem critérios de aceitação",
        "alt2": "O código do sistema é revisado para melhorias",
        "alt3": "A equipe executa os testes automatizados",
        "alt4": "A história de usuário é arquivada no sistema"
    },
    {
        "questao": "Quando uma história de usuário entra no estado 'Em Desenvolvimento'?",
        "alt1": "Após os requisitos estarem claros e a equipe começar a implementação",
        "alt2": "Assim que o gerente de projeto aprovar a funcionalidade",
        "alt3": "Quando a equipe de testes começa a validar o código",
        "alt4": "Após a história de usuário ser incluída no backlog do produto"
    },
    {
        "questao": "O que ocorre na etapa 'Em Confirmação'?",
        "alt1": "O usuário final testa a funcionalidade para validar se atende aos requisitos",
        "alt2": "A equipe de desenvolvimento começa a escrever o código",
        "alt3": "A história de usuário é arquivada para referência futura",
        "alt4": "O Scrum Master revisa a documentação técnica"
    },
    {
        "questao": "O que acontece quando uma história de usuário chega ao estado 'Concluído'?",
        "alt1": "A funcionalidade foi implementada, testada e validada pelo usuário",
        "alt2": "O código foi enviado para revisão, mas ainda não testado",
        "alt3": "A história de usuário foi cancelada por falta de informações",
        "alt4": "A equipe de desenvolvimento ainda precisa refatorar o código"
    },
    {
        "questao": "Por que histórias de usuário evitam introduzir muitos detalhes logo no início?",
        "alt1": "Para permitir flexibilidade no desenvolvimento e evitar restrições prematuras",
        "alt2": "Porque o backlog do produto não pode ter muitas informações",
        "alt3": "Para manter a equipe de desenvolvimento no controle total",
        "alt4": "Porque os clientes não devem influenciar na criação do sistema"
    },
    {
        "questao": "O que é um 'Cartão' no conceito dos 3C's?",
        "alt1": "Uma breve descrição escrita da história de usuário",
        "alt2": "Um documento formal descrevendo todas as funcionalidades do sistema",
        "alt3": "Um código de referência para a funcionalidade no repositório",
        "alt4": "Um termo utilizado para designar os testes automatizados"
    },
    {
        "questao": "Por que as histórias de usuário devem ser curtas e objetivas?",
        "alt1": "Para facilitar a comunicação e evitar ambiguidade nos requisitos",
        "alt2": "Para que o Product Owner possa modificar as funcionalidades livremente",
        "alt3": "Para reduzir o tamanho do backlog do produto",
        "alt4": "Para diminuir o tempo gasto na documentação"
    },
    {
        "questao": "Qual das opções NÃO é um exemplo de história de usuário bem escrita?",
        "alt1": "Como um gerente, quero acessar um relatório financeiro para acompanhar as despesas da empresa",
        "alt2": "Como um desenvolvedor, quero modificar a estrutura do banco de dados sem aprovação do cliente",
        "alt3": "Como um cliente, quero receber uma notificação quando um produto estiver em promoção",
        "alt4": "Como um usuário, quero redefinir minha senha caso eu a esqueça"
    },
    {
        "questao": "Por que histórias de usuário enfatizam conversas entre equipe e cliente?",
        "alt1": "Para garantir que o software atenda às expectativas e evitar falhas de comunicação",
        "alt2": "Para aumentar a burocracia do projeto e evitar mudanças no escopo",
        "alt3": "Para impedir que os desenvolvedores tomem decisões técnicas",
        "alt4": "Para documentar todas as etapas do desenvolvimento de maneira formal"
    },
    {
        "questao": "O que diferencia uma história de usuário de um requisito tradicional?",
        "alt1": "Ela é escrita de forma mais informal e focada no usuário final",
        "alt2": "Ela é obrigatoriamente acompanhada de um diagrama UML",
        "alt3": "Ela contém regras de negócios detalhadas e técnicas",
        "alt4": "Ela é criada exclusivamente pelo gerente de projetos"
    },
    {
        "questao": "O que é Integração Contínua em desenvolvimento de software?",
        "alt1": "É o processo de integrar código continuamente para evitar problemas de compatibilidade",
        "alt2": "É uma prática de desenvolvimento tradicional",
        "alt3": "É um modelo de gerenciamento de projetos",
        "alt4": "É um método para testar software manualmente"
    },
    {
        "questao": "Qual das seguintes opções é um benefício da Integração Contínua?",
        "alt1": "Redução de riscos no desenvolvimento",
        "alt2": "Aumento do tempo de entrega",
        "alt3": "Diminuição da colaboração entre equipes",
        "alt4": "Aumento da complexidade dos testes"
    },
    {
        "questao": "Quais são as quatro atividades principais da Integração Contínua?",
        "alt1": "Desenvolvimento, Build, Teste Ponta a Ponta e Stage",
        "alt2": "Planejamento, Desenvolvimento, Implantação e Suporte",
        "alt3": "Testes, Implementação, Manutenção e Suporte",
        "alt4": "Análise, Codificação, Revisão e Validação"
    },
    {
        "questao": "No contexto da Integração Contínua, o que significa 'Build'?",
        "alt1": "Processo de criar binários implantáveis",
        "alt2": "Etapa de planejamento do projeto",
        "alt3": "Fase de correção de bugs",
        "alt4": "Processo de entrega contínua"
    },
    {
        "questao": "Qual prática ajuda a garantir que novas funcionalidades sejam testadas antes da implementação do código?",
        "alt1": "Behavior-Driven Development (BDD)",
        "alt2": "Pair Programming",
        "alt3": "Waterfall Model",
        "alt4": "Scrum Mastering"
    },
    {
        "questao": "Qual das seguintes opções NÃO faz parte das práticas da Integração Contínua?",
        "alt1": "Escrever código sem controle de versão",
        "alt2": "Automação de testes",
        "alt3": "Compilação automática de código",
        "alt4": "Commit contínuo do código"
    },
    {
        "questao": "O que é o Desenvolvimento Orientado a Testes (TDD)?",
        "alt1": "Escrever testes antes de implementar o código",
        "alt2": "Testar o software apenas após a finalização",
        "alt3": "Criar código antes de qualquer teste",
        "alt4": "Apenas rodar testes manuais"
    },
    {
        "questao": "O que é um 'commit fechado' na Integração Contínua?",
        "alt1": "A garantia de que o código foi testado antes de ser integrado ao repositório principal",
        "alt2": "Um commit que foi cancelado antes da integração",
        "alt3": "Um código que não pode mais ser alterado",
        "alt4": "Um tipo de controle de acesso ao código"
    },
    {
        "questao": "Como o desenvolvimento baseado em tronco (trunk-based development) beneficia a Integração Contínua?",
        "alt1": "Evitando ramificações longas e garantindo merges frequentes",
        "alt2": "Eliminando a necessidade de versionamento",
        "alt3": "Facilitando o desenvolvimento independente sem integração",
        "alt4": "Removendo a necessidade de testes unitários"
    },
    {
        "questao": "Qual destas práticas auxilia na segurança da aplicação dentro da Integração Contínua?",
        "alt1": "Análise de código para detectar vulnerabilidades",
        "alt2": "Execução manual de testes sem automação",
        "alt3": "Uso exclusivo de logs para detectar problemas",
        "alt4": "Eliminação de testes funcionais"
    },
    {
        "questao": "O que significa Teste Ponta a Ponta na Integração Contínua?",
        "alt1": "Testar todo o sistema do início ao fim",
        "alt2": "Realizar apenas testes unitários",
        "alt3": "Testar somente uma parte isolada do código",
        "alt4": "Ignorar testes automatizados"
    },
    {
        "questao": "Por que a congruência entre ambiente de teste e produção é importante?",
        "alt1": "Para garantir que os testes sejam realistas e reflitam o ambiente final",
        "alt2": "Para reduzir os custos da equipe de desenvolvimento",
        "alt3": "Para diminuir a necessidade de testes de regressão",
        "alt4": "Para criar versões distintas do software para cada ambiente"
    },
    {
        "questao": "O que é a prática de Virtualização de Serviço?",
        "alt1": "Simular ambientes reais de produção para testes sem custo elevado",
        "alt2": "Criar versões físicas do software para rodar testes",
        "alt3": "Substituir a necessidade de automação de testes",
        "alt4": "Executar código sem conexão com um banco de dados"
    },
    {
        "questao": "O que é o conceito de 'Stage' na Integração Contínua?",
        "alt1": "Ambiente de teste que simula produção antes do deploy final",
        "alt2": "Processo de codificação de novas funcionalidades",
        "alt3": "Fase de documentação do projeto",
        "alt4": "Etapa de planejamento do backlog"
    },
    {
        "questao": "O que é a estratégia de 'deploy blue/green'?",
        "alt1": "Ter dois ambientes, um ativo e outro ocioso, para garantir transições rápidas e seguras",
        "alt2": "Realizar deploy diretamente no ambiente de produção",
        "alt3": "Criar múltiplas versões do software para diferentes usuários",
        "alt4": "Evitar a necessidade de testes antes do deploy"
    },
    {
        "questao": "O que representa um Quadro Scrum (Scrum Board)?",
        "alt1": "Um painel visual para monitorar tarefas do backlog",
        "alt2": "Uma ferramenta para calcular o tempo restante do projeto",
        "alt3": "Um sistema para armazenar código-fonte",
        "alt4": "Uma técnica de modelagem de banco de dados"
    },
    {
        "questao": "O que significa 'telemetria' no contexto da Integração Contínua?",
        "alt1": "Uso de dados do sistema para monitoramento e melhorias",
        "alt2": "Processo de desenvolvimento sem necessidade de testes",
        "alt3": "Implementação de requisitos de hardware no software",
        "alt4": "Automação de deploy sem testes prévios"
    },
    {
        "questao": "Qual o principal objetivo de manter um ambiente Stage antes da implantação?",
        "alt1": "Validar a solução em um ambiente similar à produção",
        "alt2": "Acelerar o desenvolvimento sem necessidade de testes",
        "alt3": "Reduzir custos operacionais eliminando automação",
        "alt4": "Executar código sem necessidade de controle de versão"
    },
    {
        "questao": "Qual é um dos principais indicadores de sucesso na Integração Contínua?",
        "alt1": "A frequência das integrações e a detecção rápida de falhas",
        "alt2": "O número de reuniões semanais da equipe de desenvolvimento",
        "alt3": "A quantidade de código escrito sem refatoração",
        "alt4": "A criação de múltiplas versões do código para diferentes times"
    },
    {
        "questao": "O que significa a cultura de 'Consertar integrações com falha é uma prioridade'?",
        "alt1": "Garantir que qualquer problema na integração seja resolvido rapidamente",
        "alt2": "Criar múltiplas versões do código antes de corrigir erros",
        "alt3": "Postergar correções para a fase de testes finais",
        "alt4": "Permitir que a equipe desenvolva código sem testes contínuos"
    },
    {
        "questao": "O que significa a palavra 'Kanban'?",
        "alt1": "Sinal e quadro",
        "alt2": "Controle de produção",
        "alt3": "Lista de tarefas",
        "alt4": "Fluxo de trabalho"
    },
    {
        "questao": "Qual empresa popularizou o uso do Kanban na década de 60?",
        "alt1": "Toyota",
        "alt2": "Honda",
        "alt3": "Ford",
        "alt4": "Mitsubishi"
    },
    {
        "questao": "Qual é o principal objetivo do Kanban?",
        "alt1": "Garantir entregas contínuas otimizando fluxo",
        "alt2": "Criar documentação detalhada",
        "alt3": "Definir requisitos estáticos",
        "alt4": "Evitar mudanças no projeto"
    },
    {
        "questao": "O que um 'cartão Kanban' representa?",
        "alt1": "Uma tarefa a ser realizada",
        "alt2": "Uma reunião de equipe",
        "alt3": "Uma meta do cliente",
        "alt4": "Um problema no projeto"
    },
    {
        "questao": "O que significa WIP (Work in Progress) no Kanban?",
        "alt1": "Trabalho em andamento",
        "alt2": "Trabalho concluído",
        "alt3": "Plano de entregas futuras",
        "alt4": "Reunião de planejamento"
    },
    {
        "questao": "Por que limitar o WIP é importante no Kanban?",
        "alt1": "Evitar sobrecarga de trabalho",
        "alt2": "Aumentar o número de tarefas",
        "alt3": "Priorizar atividades menores",
        "alt4": "Reduzir o tempo de reuniões"
    },
    {
        "questao": "Qual é a primeira etapa para implementar o Kanban?",
        "alt1": "Visualizar o fluxo de trabalho",
        "alt2": "Definir todas as tarefas previamente",
        "alt3": "Criar um backlog fixo",
        "alt4": "Garantir reuniões diárias"
    },
    {
        "questao": "O que acontece se não houver limite de WIP no Kanban?",
        "alt1": "O fluxo pode ficar congestionado",
        "alt2": "A equipe entrega mais rápido",
        "alt3": "O quadro Kanban fica mais organizado",
        "alt4": "As tarefas são concluídas mais rápido"
    },
    {
        "questao": "Qual o benefício de visualizar o fluxo de trabalho no Kanban?",
        "alt1": "Permite identificar gargalos e otimizar processos",
        "alt2": "Reduz a necessidade de comunicação na equipe",
        "alt3": "Elimina a necessidade de reuniões",
        "alt4": "Aumenta a complexidade do gerenciamento"
    },
    {
        "questao": "Quais são os componentes principais de um quadro Kanban?",
        "alt1": "Cartões, colunas, raias e limites de WIP",
        "alt2": "Backlog, reuniões diárias e revisão de Sprint",
        "alt3": "User Stories, épicos e tarefas",
        "alt4": "Pontos de história, estimativas e retrospectivas"
    },
    {
        "questao": "O que acontece quando um cartão Kanban avança para a próxima coluna?",
        "alt1": "A tarefa está mais próxima da conclusão",
        "alt2": "A tarefa é arquivada",
        "alt3": "O backlog é atualizado automaticamente",
        "alt4": "A equipe deve revisar os requisitos novamente"
    },
    {
        "questao": "O que as raias Kanban representam?",
        "alt1": "Categorias para separar tipos de atividades",
        "alt2": "Linhas do tempo de cada tarefa",
        "alt3": "Erros no fluxo de trabalho",
        "alt4": "Colunas adicionais para histórico de tarefas"
    },
    {
        "questao": "O que é necessário para manter um bom fluxo de trabalho no Kanban?",
        "alt1": "Monitorar continuamente os gargalos",
        "alt2": "Aumentar o número de tarefas em progresso",
        "alt3": "Eliminar limites de WIP",
        "alt4": "Evitar mudanças no quadro Kanban"
    },
    {
        "questao": "Como o Kanban ajuda na entrega contínua?",
        "alt1": "Reduzindo a complexidade e otimizando fluxo",
        "alt2": "Tornando a documentação obrigatória",
        "alt3": "Aumentando o tempo de desenvolvimento",
        "alt4": "Criando mais dependências entre tarefas"
    },
    {
        "questao": "Por que as políticas de processo explícitas são importantes no Kanban?",
        "alt1": "Para garantir que todos compreendam o fluxo",
        "alt2": "Para aumentar a burocracia do projeto",
        "alt3": "Para restringir mudanças no sistema",
        "alt4": "Para permitir que apenas gerentes tomem decisões"
    },
    {
        "questao": "O que é um gargalo no contexto do Kanban?",
        "alt1": "Um ponto onde o fluxo de trabalho fica lento",
        "alt2": "Uma tarefa concluída com sucesso",
        "alt3": "Um erro crítico no código",
        "alt4": "Um processo automatizado"
    },
    {
        "questao": "O que a Teoria das Restrições ensina no Kanban?",
        "alt1": "Identificar e melhorar gargalos",
        "alt2": "Eliminar reuniões desnecessárias",
        "alt3": "Criar backlogs estáticos",
        "alt4": "Evitar mudanças nos processos"
    },
    {
        "questao": "Qual é um exemplo de política explícita no Kanban?",
        "alt1": "Definir claramente os limites de WIP",
        "alt2": "Evitar comunicação entre os membros da equipe",
        "alt3": "Sempre iniciar múltiplas tarefas ao mesmo tempo",
        "alt4": "Trabalhar sem definir prioridades"
    },
    {
        "questao": "Por que a gestão do fluxo é fundamental no Kanban?",
        "alt1": "Para manter o trabalho fluindo de forma eficiente",
        "alt2": "Para garantir que todas as tarefas fiquem acumuladas",
        "alt3": "Para impedir que tarefas sejam concluídas rapidamente",
        "alt4": "Para tornar o processo mais burocrático"
    },
    {
        "questao": "Como o Kanban ajuda a evitar desperdícios no processo de desenvolvimento?",
        "alt1": "Focando no fluxo contínuo e na eliminação de gargalos",
        "alt2": "Criando documentação extensa",
        "alt3": "Permitindo um número ilimitado de tarefas simultâneas",
        "alt4": "Evitando a entrega contínua"
    },
    {
        "questao": "O que significa a estratégia de Produto Mínimo Viável (MVP) no Lean Software Development?",
        "alt1": "Lançar uma versão mínima do produto para obter feedback rápido dos usuários",
        "alt2": "Criar um produto finalizado e completo antes de qualquer teste",
        "alt3": "Desenvolver todas as funcionalidades do produto antes do lançamento",
        "alt4": "Testar internamente sem envolver usuários na validação"
    },
    {
        "questao": "De onde o conceito de Lean foi originalmente derivado?",
        "alt1": "Do Sistema de Produção Toyota",
        "alt2": "Do desenvolvimento de software tradicional",
        "alt3": "Da metodologia Scrum",
        "alt4": "De práticas de engenharia de software avançadas"
    },
    {
        "questao": "Qual é um dos principais objetivos do Lean Software Development?",
        "alt1": "Eliminar desperdícios e maximizar valor para o cliente",
        "alt2": "Aumentar a burocracia nos processos de desenvolvimento",
        "alt3": "Apenas reduzir custos sem focar na entrega de valor",
        "alt4": "Desenvolver software sem se preocupar com a satisfação do cliente"
    },
    {
        "questao": "Quais são alguns pontos fortes do Lean Software Development?",
        "alt1": "Entrega rápida de funcionalidades e eliminação de desperdícios",
        "alt2": "Forte dependência da equipe sem necessidade de feedback do cliente",
        "alt3": "Focar na documentação em vez de iterar o desenvolvimento",
        "alt4": "Evitar o envolvimento da equipe na tomada de decisões"
    },
    {
        "questao": "O que é considerado um dos pontos fracos do Lean Software Development?",
        "alt1": "Dependência da equipe envolvida, tornando-o menos escalável",
        "alt2": "Excesso de burocracia e documentação",
        "alt3": "Falta de comunicação com o cliente",
        "alt4": "Foco exclusivo na codificação sem considerar outros fatores"
    },
    {
        "questao": "O que significa 'valor na perspectiva do cliente' no Lean Software Development?",
        "alt1": "Focar no que o cliente realmente precisa, e não apenas no que ele pede",
        "alt2": "Entregar tudo o que o cliente solicita sem questionamento",
        "alt3": "Evitar comunicação com o cliente para economizar tempo",
        "alt4": "Apenas se preocupar com aspectos técnicos do software"
    },
    {
        "questao": "O que é mapeamento do fluxo de valor?",
        "alt1": "Analisar e identificar onde o valor está sendo gerado no processo",
        "alt2": "Criar uma lista de tarefas para os desenvolvedores",
        "alt3": "Definir prazos fixos para cada fase do projeto",
        "alt4": "Evitar mudanças no projeto durante o desenvolvimento"
    },
    {
        "questao": "Como o Kanban pode ajudar no mapeamento do fluxo de valor?",
        "alt1": "Permite visualizar o fluxo de trabalho e identificar gargalos",
        "alt2": "Garante que todas as tarefas tenham prazos rígidos",
        "alt3": "Impede a colaboração entre os membros da equipe",
        "alt4": "Substitui completamente a necessidade de planejamento"
    },
    {
        "questao": "O que o Lean considera como 'desperdício'?",
        "alt1": "Qualquer atividade que consome recursos sem agregar valor ao cliente",
        "alt2": "Processos que exigem comunicação entre diferentes equipes",
        "alt3": "Adoção de metodologias ágeis no desenvolvimento",
        "alt4": "Qualquer prática que envolve feedback do cliente"
    },
    {
        "questao": "Qual é um exemplo de desperdício identificado no Lean Software Development?",
        "alt1": "Aguardar aprovação da gerência para avançar no desenvolvimento",
        "alt2": "Criar uma estrutura de código bem organizada",
        "alt3": "Fazer revisões contínuas para evitar erros",
        "alt4": "Ter uma equipe multidisciplinar colaborando no projeto"
    },
    {
        "questao": "O que é fluxo de trabalho contínuo no Lean Software Development?",
        "alt1": "Garantir que o processo ocorra sem interrupções ou bloqueios",
        "alt2": "Trabalhar com prazos rígidos e inflexíveis",
        "alt3": "Executar todas as tarefas de uma só vez para acelerar a entrega",
        "alt4": "Evitar revisões no processo de desenvolvimento"
    },
    {
        "questao": "Qual das opções a seguir é um dos sete desperdícios no Lean Software Development?",
        "alt1": "Movimentação desnecessária de informações ou recursos",
        "alt2": "Revisão contínua da qualidade do código",
        "alt3": "Colaboração entre diferentes membros da equipe",
        "alt4": "Utilização de metodologias ágeis no planejamento"
    },
    {
        "questao": "O que o Lead Time representa no Lean Software Development?",
        "alt1": "O tempo total desde o pedido do cliente até a entrega do produto",
        "alt2": "O tempo de codificação necessário para implementar uma funcionalidade",
        "alt3": "O tempo gasto apenas no planejamento do projeto",
        "alt4": "O tempo que um desenvolvedor leva para completar uma tarefa"
    },
    {
        "questao": "Como se calcula a eficiência do fluxo de valor no Lean?",
        "alt1": "Dividindo o tempo de trabalho pelo Lead Time total",
        "alt2": "Somando todos os prazos das tarefas individuais",
        "alt3": "Comparando o custo do projeto com a receita esperada",
        "alt4": "Multiplicando a quantidade de funcionalidades pelo tempo de desenvolvimento"
    },
    {
        "questao": "O que caracteriza um processamento excessivo como desperdício no Lean?",
        "alt1": "Quando um trabalho excede os requisitos do cliente",
        "alt2": "Quando a equipe discute melhorias no processo",
        "alt3": "Quando há colaboração entre diferentes setores do projeto",
        "alt4": "Quando revisões são feitas para garantir a qualidade do código"
    },
    {
        "questao": "O que significa 'esperas e filas' como desperdício no Lean Software Development?",
        "alt1": "Quando um trabalho fica parado aguardando aprovação ou dependências",
        "alt2": "Quando o projeto avança muito rápido sem documentação",
        "alt3": "Quando revisões frequentes são feitas para garantir qualidade",
        "alt4": "Quando as equipes têm liberdade para testar novas abordagens"
    },
    {
        "questao": "Por que a identificação do fluxo de valor é crucial no Lean Software Development?",
        "alt1": "Para eliminar etapas desnecessárias e otimizar o processo",
        "alt2": "Para aumentar a burocracia e formalizar as entregas",
        "alt3": "Para garantir que todos os desenvolvedores sigam regras rígidas",
        "alt4": "Para padronizar o código de todos os projetos"
    },
    {
        "questao": "Qual é um dos principais benefícios de aplicar o Lean no desenvolvimento de software?",
        "alt1": "Redução de desperdícios e entrega mais rápida de valor ao cliente",
        "alt2": "Eliminação da necessidade de testes no desenvolvimento",
        "alt3": "Aumento da burocracia e documentação detalhada",
        "alt4": "Focar no produto final sem interação com o cliente"
    },
    {
        "questao": "Qual é um dos princípios fundamentais do Lean Software Development?",
        "alt1": "Eliminar desperdícios e focar na entrega contínua de valor",
        "alt2": "Priorizar a documentação acima do desenvolvimento",
        "alt3": "Criar funcionalidades sem considerar feedback do cliente",
        "alt4": "Reduzir ao máximo a comunicação entre a equipe de desenvolvimento"
    },
    {
        "questao": "O que é Lean Software Development?",
        "alt1": "Uma abordagem ágil focada em eliminar desperdícios e otimizar recursos",
        "alt2": "Um método para acelerar desenvolvimento de software sem planejamento",
        "alt3": "Uma forma de criar software sem a participação do cliente",
        "alt4": "Uma técnica de codificação específica para sistemas embarcados"
    }
]
